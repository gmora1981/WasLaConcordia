@page "/ficha-persona"

@using LaConcordia.DTO
@using LaConcordia.Interface
@using LaConcordia.Pagination
@inject IFichapersonal fichaRepo
@inject IJSRuntime JS
@inject IDisplayMessage displayMessage
@inject INacionalidad nacionalidadRepo
@inject IUnidad unidadRepo
@inject ITipolicencium tipolicenciaRepo
@inject ICargo cargoRepo
@inject IDuenopuesto duenopuestoRepo

<h3>Fichapersonal La Concordia</h3>

<!-- Encabezado: Nuevo, Buscar -->
<div class="mb-3 d-flex gap-2">
    <button class="btn btn-primary" @onclick="NuevoRegistro">Nuevo</button>
    <input type="text" class="form-control" placeholder="Buscar por Cédula, Nombre o apellidos..." @bind="razonBusqueda" />
    <select class="form-select" @bind="estadoFiltro">
        <option value="">-- Todos --</option>
        <option value="a">Activo</option>
        <option value="p">Pasivo</option>
    </select>
    <button class="btn btn-success" @onclick="BuscarFichas">Buscar</button>
</div>

<!-- Paginación -->
<div class="d-flex justify-content-between align-items-center mt-3">
    <div class="flex-grow-1">
        <p class="text-muted mb-0">Total: @TotalUsuarios | Página: @PaginaActual</p>
    </div>
    <div class="d-flex justify-content-center flex-grow-1">
        <Pagination TotalItems="@TotalUsuarios"
                    PageSize="@PageSize"
                    CurrentPage="@PaginaActual"
                    OnPageChanged="OnPageChangedAsync" />
    </div>
    <div class="flex-grow-1 text-end"></div>
</div>

<!-- Tabla de fichas personales -->
<table class="table table-bordered table-hover mt-3">
    <thead class="table-dark">
        <tr>
            <th>Cédula</th>
            <th>Apellidos</th>
            <th>Nombre</th>
            <th>Celular</th>
            <th>Fecha Nac.</th>
            <th>Ingreso</th>
            <th>Estado</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @if (fichas != null && fichas.Count > 0)
        {
            @foreach (var ficha in fichas)
            {
                <tr @onclick="() => SeleccionarFicha(ficha)" class="@(ficha == fichaSeleccionada ? "table-primary" : "")" style="cursor: pointer;">
                    <td>@ficha.Cedula</td>
                    <td>@ficha.Apellidos</td>
                    <td>@ficha.Nombre</td>
                    <td>@ficha.Celular</td>
                    <td>@ficha.Fechanacimiento</td>
                    <td>@ficha.Fechaingreso</td>&
                    <td>@ObtenerNombreEstado(ficha.Estado)</td>
                    <td>Boton</td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="7" class="text-center">No se encontraron registros.</td>
            </tr>
        }
    </tbody>
</table>

<!-- Detalle -->
<div class="border rounded p-3 mt-3">
    <h5>Detalle Ficha Personal</h5>
    <EditForm Model="fichaSeleccionada">
        <div class="row">
            <!-- Columna 1 -->
            <div class="col-md-6">
                <div class="mb-2">
                    <label class="form-label">Cedula</label>
                    <InputText class="form-control mb-2" @bind-Value="fichaSeleccionada.Cedula" placeholder="Cédula" disabled="@(!esNuevo)" />
                </div>
                <div class="mb-2">
                    <label class="form-label">Apellidos</label>
                    <InputText class="form-control mb-2" @bind-Value="fichaSeleccionada.Apellidos" placeholder="Apellidos" />
                </div>
                <div class="mb-2">
                    <label class="form-label">Telefono</label>
                    <InputText class="form-control mb-2" @bind-Value="fichaSeleccionada.Telefono" placeholder="Teléfono" />
                </div>
                <div class="mb-2">
                    <label class="form-label">Fecha Nacimiento</label>
                    <InputDate class="form-control" @bind-Value="fichaSeleccionada.Fechanacimiento" />
                </div>
                <div class="mb-2">
                    <label class="form-label">Domicilio</label>
                    <InputText class="form-control mb-2" @bind-Value="fichaSeleccionada.Domicilio" placeholder="Domicilio" />
                </div>

                <!-- Tipo Licencia -->
                <div class="mb-2">
                    <label class="form-label">Tipo Licencia</label>
                    <InputSelect class="form-select" @bind-Value="fichaSeleccionada.Fktipolicencia">
                        <option value="">-- Seleccione Tipo Licencia --</option>
                        @foreach (var tipo in listaTipoLicencia)
                        {
                            <option value="@tipo.Idtipo">@tipo.Tipolicencia</option>
                        }
                    </InputSelect>
                </div>

                <!-- Cargo -->
                <div class="mb-2">
                    <label class="form-label">Cargo</label>
                    <InputSelect class="form-select" @bind-Value="fichaSeleccionada.Fkcargo">
                        <option value="">-- Seleccione Cargo --</option>
                        @foreach (var tipo in listaCargos)
                        {
                            <option value="@tipo.Idcargo">@tipo.Cargo1</option>
                        }
                    </InputSelect>
                </div>

                <div class="mb-2">
                    <label class="form-label">CUOTA</label>
                    <InputNumber class="form-control mb-2" @bind-Value="fichaSeleccionada.Cuotaf" placeholder="Cuota F" />
                </div>
            </div>

            <!-- Columna 2 -->
            <div class="col-md-6">
                <div class="mb-2">
                    <label class="form-label">Nombre</label>
                    <InputText class="form-control mb-2" @bind-Value="fichaSeleccionada.Nombre" placeholder="Nombre" />
                </div>
                <div class="mb-2">
                    <label class="form-label">Correo</label>
                    <InputText class="form-control mb-2" @bind-Value="fichaSeleccionada.Correo" placeholder="Correo" />
                </div>
                <div class="mb-2">
                    <label class="form-label">Celular</label>
                    <InputText class="form-control mb-2" @bind-Value="fichaSeleccionada.Celular" placeholder="Celular" />
                </div>
                <div class="mb-2">
                    <label class="form-label">Fecha Ingreso</label>
                    <InputDate class="form-control" @bind-Value="fichaSeleccionada.Fechaingreso" />
                </div>
                <div class="mb-2">
                    <label class="form-label">Referencia</label>
                    <InputText class="form-control mb-2" @bind-Value="fichaSeleccionada.Referencia" placeholder="Referencia" />
                </div>

                <!-- Nacionalidad -->
                <div class="mb-2">
                    <label class="form-label">Nacionalidad</label>
                    <InputSelect class="form-select" @bind-Value="fichaSeleccionada.Fknacionalidad">
                        <option value="">-- Seleccione Nacionalidad --</option>
                        @foreach (var nac in listaNacionalidad)
                        {
                            <option value="@nac.Idnacionalidad">@nac.Nacionalidad1</option>
                        }
                    </InputSelect>
                </div>
            </div>

            <!-- Sección Gestión de Unidad -->
            <div class="col-md-12 border rounded p-3 mt-3">
                <h6><i class="bi bi-truck"></i> Gestión de Unidad</h6>

                <div class="row">
                    <div class="col-md-4">
                        <InputText class="form-control mb-2" placeholder="Código de Unidad" @bind-Value="codigoUnidad" />
                    </div>
                    <div class="col-md-2">
                        <button class="btn btn-outline-primary" @onclick="BuscarUnidad">Buscar Unidad</button>
                    </div>
                </div>

                @if (unidadEncontrada is not null)
                {
                    <div class="row">
                        <div class="col-md-4"><strong>Placa:</strong> @unidadEncontrada.Placa</div>
                        <div class="col-md-4"><strong>Propietario:</strong> @unidadEncontrada.Propietario</div>
                        <div class="col-md-4"><strong>Marca:</strong> @unidadEncontrada.Marca</div>
                        <div class="col-md-4"><strong>Modelo:</strong> @unidadEncontrada.Modelo</div>
                        <div class="col-md-4"><strong>Color:</strong> @unidadEncontrada.Color</div>
                        <div class="col-md-4"><strong>Año:</strong> @unidadEncontrada.Anio</div>
                        <div class="col-md-4"><strong>Fecha:</strong> @unidadEncontrada.Fecha?.ToShortDateString()</div>
                    </div>
                }
            </div>

            <!-- Sección Gestión de Dueño del Puesto -->
            <div class="col-md-12 border rounded p-3 mt-3">
                <h6><i class="bi bi-person-badge"></i> Gestión de Dueño del Puesto</h6>

                <div class="row">
                    <div class="col-md-4">
                        <InputText class="form-control mb-2" placeholder="Cédula del Dueño del Puesto" @bind-Value="cedulaDuenopuesto" />
                    </div>
                    <div class="col-md-2">
                        <button class="btn btn-outline-primary" @onclick="BuscarDuenopuesto">Buscar Dueño</button>
                    </div>
                </div>

                @if (duenopuestoEncontrado is not null)
                {
                    <div class="row">
                        <div class="col-md-6"><strong>Nombres:</strong> @duenopuestoEncontrado.Nombres</div>
                        <div class="col-md-6"><strong>Apellidos:</strong> @duenopuestoEncontrado.Apellidos</div>
                    </div>
                }
            </div>

            <!-- Estado en toda la fila -->
            <div class="col-md-12">
                <InputSelect class="form-control mb-2" @bind-Value="fichaSeleccionada.Estado">
                    <option value="">-- Estado --</option>
                    <option value="a">Activo</option>
                    <option value="p">Pasivo</option>
                </InputSelect>
            </div>
        </div>
    </EditForm>

    <div class="d-flex gap-2 mt-2">
        <button class="btn btn-warning" @onclick="GuardarCambios" disabled="@(!PuedeGuardar)">Actualizar</button>
        <button class="btn btn-danger" @onclick="EliminarFicha" disabled="@(!PuedeEliminar)">Eliminar</button>
        <button class="btn btn-secondary" @onclick="CancelarEdicion">Cancelar</button>
    </div>
</div>

@code {
    // Listado paginado de fichas personales
    private List<FichapersonalDTO> fichas = new();

    // Registro seleccionado para mostrar y editar
    private FichapersonalDTO fichaSeleccionada = new();

    // Listas para los combos de selección
    private List<NacionalidadDTO> listaNacionalidad = new();
    private List<TipolicenciumDTO> listaTipoLicencia = new();
    private List<CargoDTO> listaCargos = new();

    // Filtros y controles de búsqueda
    private string razonBusqueda = string.Empty;
    private string estadoFiltro = string.Empty;
    private bool esNuevo = false;

    // Para gestión de unidad y dueño del puesto
    private string codigoUnidad = string.Empty;
    private UnidadDTO? unidadEncontrada;
    private string cedulaDuenopuesto = string.Empty;
    private DuenopuestoDTO? duenopuestoEncontrado;

    // Paginación
    private int PaginaActual = 1;
    private int PageSize = 8;
    private int TotalUsuarios = 0;

    // Inicialización al cargar la página
    protected override async Task OnInitializedAsync()
    {
        await CargarListasRelacionadas();  // Cargar listas para combos
        await CargarFichasAsync();          // Cargar listado de fichas
    }

    // Método que carga los datos para combos
    private async Task CargarListasRelacionadas()
    {
        listaCargos = await cargoRepo.GetCargoInfoAll();
        listaTipoLicencia = await tipolicenciaRepo.GetTipolicenciaInfoAll();
        listaNacionalidad = await nacionalidadRepo.GetNacionalidadesAll();
    }

    // Carga el listado de fichas según filtros y paginación
    private async Task CargarFichasAsync()
    {
        var resultado = await fichaRepo.GetFichaPersonalPaginados(PaginaActual, PageSize, razonBusqueda, estadoFiltro);
        fichas = resultado.Items;
        TotalUsuarios = resultado.TotalItems;
    }

    // Acción del botón Buscar
    private async Task BuscarFichas()
    {
        PaginaActual = 1;
        await CargarFichasAsync();
    }

    // Busca el dueño del puesto por cédula
    private async Task BuscarDuenopuesto()
    {
        if (!string.IsNullOrWhiteSpace(cedulaDuenopuesto))
        {
            var resultado = await duenopuestoRepo.GetDuenopuestoByCedula(cedulaDuenopuesto);
            if (resultado is not null && resultado.Estado == "a")
            {
                duenopuestoEncontrado = resultado;
                fichaSeleccionada.Fkdpuesto = resultado.Cedula;
            }
            else
            {
                duenopuestoEncontrado = null;
                await JS.InvokeVoidAsync("alert", "Dueño no encontrado o inactivo.");
            }
        }
    }

    // Selecciona un registro de la tabla para editar
    private async void SeleccionarFicha(FichapersonalDTO ficha)
    {
        // Cargar listas para que los combos tengan opciones y puedan seleccionar valor
        await CargarListasRelacionadas();

        // Copiar datos del registro seleccionado
        fichaSeleccionada = new FichapersonalDTO
            {
                Cedula = ficha.Cedula,
                Nombre = ficha.Nombre,
                Apellidos = ficha.Apellidos,
                Correo = ficha.Correo,
                Telefono = ficha.Telefono,
                Celular = ficha.Celular,
                Fechanacimiento = ficha.Fechanacimiento,
                Fechaingreso = ficha.Fechaingreso,
                Domicilio = ficha.Domicilio,
                Referencia = ficha.Referencia,
                Estadoservicio = ficha.Estadoservicio,
                Cuotaf = ficha.Cuotaf,
                Estado = ficha.Estado,
                Fknacionalidad = ficha.Fknacionalidad,
                Fkunidad = ficha.Fkunidad,
                Fkdpuesto = ficha.Fkdpuesto,
                Fkcargo = ficha.Fkcargo,
                Fktipolicencia = ficha.Fktipolicencia
            };

        // Reiniciar datos relacionados
        unidadEncontrada = null;
        duenopuestoEncontrado = null;

        // Guardar código unidad y cédula dueño para buscar detalles relacionados
        codigoUnidad = ficha.Fkunidad ?? string.Empty;
        cedulaDuenopuesto = ficha.Fkdpuesto ?? string.Empty;

        // Buscar datos relacionados
        await BuscarUnidad();
        await BuscarDuenopuesto();

        esNuevo = false;
        StateHasChanged(); // Refrescar UI
    }

    // Crea un nuevo registro en blanco
    private void NuevoRegistro()
    {
        fichaSeleccionada = new FichapersonalDTO();
        unidadEncontrada = null;
        duenopuestoEncontrado = null;
        codigoUnidad = string.Empty;
        cedulaDuenopuesto = string.Empty;
        esNuevo = true;
    }

    // Guarda cambios en la ficha seleccionada (nuevo o editar)
    private async Task GuardarCambios()
    {
        try
        {
            if (esNuevo)
                await fichaRepo.InsertFichaPersonal(fichaSeleccionada);
            else
                await fichaRepo.UpdateFichaPersonal(fichaSeleccionada);

            await CargarFichasAsync();
            fichaSeleccionada = new FichapersonalDTO();
            unidadEncontrada = null;
            duenopuestoEncontrado = null;
            esNuevo = false;
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error al guardar: {ex.Message}");
        }
    }

    // Elimina la ficha seleccionada
    private async Task EliminarFicha()
    {
        if (!string.IsNullOrEmpty(fichaSeleccionada.Cedula))
        {
            bool confirm = await JS.InvokeAsync<bool>("confirm", "¿Estás seguro de eliminar esta ficha?");
            if (confirm)
            {
                await fichaRepo.DeleteFichaPersonalById(fichaSeleccionada.Cedula);
                await CargarFichasAsync();
                fichaSeleccionada = new FichapersonalDTO();
                unidadEncontrada = null;
                duenopuestoEncontrado = null;
            }
        }
    }

    // Cancela edición y limpia el formulario
    private void CancelarEdicion()
    {
        fichaSeleccionada = new FichapersonalDTO();
        unidadEncontrada = null;
        duenopuestoEncontrado = null;
        esNuevo = false;
        codigoUnidad = string.Empty;
        cedulaDuenopuesto = string.Empty;
    }

    // Maneja cambio de página en paginación
    private async Task OnPageChangedAsync(int nuevaPagina)
    {
        PaginaActual = nuevaPagina;
        await CargarFichasAsync();
    }

    // Traduce código estado a texto
    private string ObtenerNombreEstado(string? estado)
    {
        return estado switch
        {
            "a" => "Activo",
            "p" => "Pasivo",
            _ => "Desconocido"
        };
    }

    // Busca unidad por código y actualiza el formulario y datos relacionados
    private async Task BuscarUnidad()
    {
        if (!string.IsNullOrWhiteSpace(codigoUnidad))
        {
            var resultado = await unidadRepo.GetUnidadById(codigoUnidad);
            if (resultado != null)
            {
                unidadEncontrada = resultado;
                fichaSeleccionada.Fkunidad = resultado.Unidad1;
            }
            else
            {
                unidadEncontrada = null;
            }
        }
    }

    // Validaciones para habilitar botones
    private bool PuedeGuardar => !string.IsNullOrWhiteSpace(fichaSeleccionada.Cedula);
    private bool PuedeEliminar => !esNuevo && !string.IsNullOrWhiteSpace(fichaSeleccionada.Cedula);
}

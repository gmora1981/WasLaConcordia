@page "/unidad"
@using LaConcordia.Interface
@inject IUnidad unidadRepo
@inject IJSRuntime JS
@using LaConcordia.DTO
@using LaConcordia.Pagination
@inject IDisplayMessage displayMessage

<h3>Gestión de Unidad</h3>

<div class="mb-3 d-flex gap-2">
    <button class="btn btn-primary" @onclick="NuevoRegistro">Nuevo</button>
    <input type="text" class="form-control" placeholder="Buscar por placa..." @bind="filtroPlaca" />
    <input type="text" class="form-control" placeholder="Buscar por propietario..." @bind="filtroPropietario" />

    <select class="form-select" @bind="estadoFiltro">
        <option value="">-- Todos --</option>
        <option value="a">Activo</option>
        <option value="p">Pasivo</option>
    </select>
    <button class="btn btn-success" @onclick="Buscar">Buscar</button>
</div>

<div class="d-flex justify-content-between align-items-center mt-3">
    <!-- Columna izquierda -->
    <div class="flex-grow-1">
        <p class="text-muted mb-0">Total: @TotalRegistros | Página: @PaginaActual</p>
    </div>

    <!-- Columna centro -->
    <div class="d-flex justify-content-center flex-grow-1">
        <Pagination TotalItems="@TotalRegistros"
                    PageSize="@PageSize"
                    CurrentPage="@PaginaActual"
                    OnPageChanged="OnPageChangedAsync" />
    </div>

    <!-- Columna derecha (vacía por ahora) -->
    <div class="flex-grow-1 text-end">
        <!-- Espacio reservado para futuras acciones -->
    </div>
</div>

<table class="table table-bordered table-hover">
    <thead class="table-dark">
        <tr>
            <th>Unidad</th>
            <th>Placa</th>
            <th>Cédula</th>
            <th>Propietario</th>
            <th>Marca</th>
            <th>Modelo</th>
            <th>Año</th>
            <th>Estado</th>
        </tr>
    </thead>
    <tbody>
        @if (unidades is not null && unidades.Count > 0)
        {
            @foreach (var u in unidades)
            {
                <tr @onclick="() => Seleccionar(u)" class="@(u.Unidad1 == unidadSeleccionada?.Unidad1 ? "table-primary" : "")">
                    <td>@u.Unidad1</td>
                    <td>@u.Placa</td>
                    <td>@u.Idpropietario</td>
                    <td>@u.Propietario</td>
                    <td>@u.Marca</td>
                    <td>@u.Modelo</td>
                    <td>@u.Anio</td>
                    <td>@MostrarEstado(u.Estado)</td>
                </tr>
            }
        }
        else
        {
            <tr><td colspan="7" class="text-center">No se encontraron registros.</td></tr>
        }
    </tbody>
</table>

<div class="border p-3 rounded">
    <h5>Detalle</h5>
    <EditForm Model="unidadSeleccionada">
        <InputText class="form-control mb-2" @bind-Value="unidadSeleccionada.Unidad1" placeholder="Unidad" disabled="@(!esNuevo)" />
        <InputText class="form-control mb-2" @bind-Value="unidadSeleccionada.Placa" placeholder="Placa" />
        <InputText class="form-control mb-2" @bind-Value="unidadSeleccionada.Idpropietario" placeholder="Cédula" />
        <InputText class="form-control mb-2" @bind-Value="unidadSeleccionada.Propietario" placeholder="Propietario" />
        <InputText class="form-control mb-2" @bind-Value="unidadSeleccionada.Marca" placeholder="Marca" />
        <InputText class="form-control mb-2" @bind-Value="unidadSeleccionada.Modelo" placeholder="Modelo" />
        <InputNumber class="form-control mb-2" @bind-Value="unidadSeleccionada.Anio" placeholder="Año" />
        <InputText class="form-control mb-2" @bind-Value="unidadSeleccionada.Color" placeholder="Color" />
        <InputSelect class="form-control mb-2" @bind-Value="unidadSeleccionada.Estado">
            <option value="">-- Seleccione Estado --</option>
            <option value="a">Activo</option>
            <option value="p">Pasivo</option>
        </InputSelect>
    </EditForm>
    <div class="d-flex gap-2 mt-2">
        <button class="btn btn-warning" @onclick="Guardar" disabled="@(!PuedeGuardar)">Guardar</button>
        <button class="btn btn-danger" @onclick="Eliminar" disabled="@(!PuedeEliminar)">Eliminar</button>
        <button class="btn btn-secondary" @onclick="Cancelar">Cancelar</button>
    </div>
</div>

@code {
    private List<UnidadDTO> unidades = new();
    private UnidadDTO unidadSeleccionada = new();
    private bool esNuevo = false;

    private string filtroPlaca = "";
    private string filtroPropietario = "";
    private string estadoFiltro = "";

    private int PaginaActual = 1;
    private int PageSize = 10;
    private int TotalRegistros = 0;

    protected override async Task OnInitializedAsync()
    {
        await CargarAsync();
    }

    private async Task CargarAsync()
    {
        var result = await unidadRepo.GetUnidadPaginados(
            PaginaActual, PageSize, filtroPlaca, null, null, filtroPropietario, estadoFiltro);

        unidades = result.Items;
        TotalRegistros = result.TotalItems;
    }

    private async Task Buscar()
    {
        PaginaActual = 1;
        await CargarAsync();
    }

    private void Seleccionar(UnidadDTO u)
    {
        unidadSeleccionada = new UnidadDTO
            {
                Unidad1 = u.Unidad1,
                Placa = u.Placa,
                Propietario = u.Propietario,
                Marca = u.Marca,
                Modelo = u.Modelo,
                Anio = u.Anio,
                Estado = u.Estado,
                Color = u.Color,
                Idpropietario = u.Idpropietario
            };
        esNuevo = false;
    }

    private void NuevoRegistro()
    {
        unidadSeleccionada = new UnidadDTO();
        esNuevo = true;
    }

    private async Task Guardar()
    {
        try
        {
            if (esNuevo)
                await unidadRepo.InsertUnidad(unidadSeleccionada);
            else
                await unidadRepo.UpdateUnidad(unidadSeleccionada);

            await CargarAsync();
            unidadSeleccionada = new();
            esNuevo = false;
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error al guardar: {ex.Message}");
        }
    }

    private async Task Eliminar()
    {
        bool confirm = await JS.InvokeAsync<bool>("confirm", "¿Está seguro de eliminar?");
        if (confirm)
        {
            await unidadRepo.DeleteUnidadById(unidadSeleccionada.Unidad1);
            await CargarAsync();
            unidadSeleccionada = new();
        }
    }

    private void Cancelar()
    {
        unidadSeleccionada = new();
        esNuevo = false;
    }

    private async Task OnPageChangedAsync(int nuevaPagina)
    {
        PaginaActual = nuevaPagina;
        await CargarAsync();
    }

    private string MostrarEstado(string? estado) => estado switch
    {
        "a" => "Activo",
        "p" => "Pasivo",
        _ => "Desconocido"
    };

    private bool PuedeGuardar => !string.IsNullOrWhiteSpace(unidadSeleccionada.Unidad1) && !string.IsNullOrWhiteSpace(unidadSeleccionada.Placa);
    private bool PuedeEliminar => !esNuevo && !string.IsNullOrWhiteSpace(unidadSeleccionada.Unidad1);
}

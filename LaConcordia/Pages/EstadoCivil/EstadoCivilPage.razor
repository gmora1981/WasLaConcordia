@page "/estadocivil"
@using LaConcordia.DTO
@using LaConcordia.Interface
@using LaConcordia.Pagination
@inject IEstadoCivil estadoCivilRepo
@inject IJSRuntime JS
@inject IDisplayMessage displayMessage

<h3>Gestión de Estado Civil</h3>

<!-- Controles de búsqueda y nuevo registro -->
<div class="mb-3 d-flex gap-2">
    <button class="btn btn-primary" @onclick="NuevoRegistro">Nuevo</button>
    <input type="text" class="form-control" placeholder="Buscar por descripción..." @bind="razonBusqueda" />
    <select class="form-select" @bind="estadoFiltro">
        <option value="">-- Todos --</option>
        <option value="a">Activo</option>
        <option value="p">Pasivo</option>
    </select>
    <button class="btn btn-success" @onclick="BuscarEstadoCivil">Buscar</button>
</div>

<!-- Info de paginación -->
<p class="text-muted mt-2">Total: @TotalRegistros | Página: @PaginaActual</p>

<!-- Paginación -->
<Pagination TotalItems="@TotalRegistros"
            PageSize="@PageSize"
            CurrentPage="@PaginaActual"
            OnPageChanged="OnPageChangedAsync" />


<!-- Tabla de estado civil -->
<table class="table table-bordered table-hover">
    <thead class="table-dark">
        <tr>
            <th>ID</th>
            <th>Descripción</th>
            <th>Estado</th>
        </tr>
    </thead>
    <tbody>
        @if (estadocivil != null && estadocivil.Count > 0)
        {
            @foreach (var estado in estadocivil)
            {
                <tr @onclick="() => SeleccionarEstadoCivil(estado)" class="@(estado.Idestadocivil == estadoCivilSeleccionado?.Idestadocivil ? "table-primary" : "")" style="cursor: pointer;">
                    <td>@estado.Idestadocivil</td>
                    <td>@estado.Descripcion</td>
                    <td>@ObtenerNombreEstado(estado.Estado)</td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="3" class="text-center">No se encontraron estados civiles.</td>
            </tr>
        }
    </tbody>
</table>

<!-- Detalle y formulario -->
<div class="border rounded p-3 mt-3">
    <h5>Detalle Estado Civil</h5>
    <EditForm Model="estadoCivilSeleccionado">
        <input class="form-control mb-2" @bind="estadoCivilSeleccionado.Descripcion" placeholder="Descripción" @ref="inputDescripcionRef" />
        <InputSelect class="form-control mb-2" @bind-Value="estadoCivilSeleccionado.Estado">
            <option value="">-- Seleccione Estado --</option>
            <option value="a">Activo</option>
            <option value="p">Pasivo</option>
        </InputSelect>
    </EditForm>

    <!-- Botones de acción -->
    <div class="d-flex gap-2 mt-2">
        <button class="btn btn-warning" @onclick="GuardarCambios" disabled="@(!PuedeGuardar)">Guardar</button>
        <button class="btn btn-danger" @onclick="EliminarEstadoCivil" disabled="@(!PuedeEliminar)">Eliminar</button>
        <button class="btn btn-secondary" @onclick="CancelarEdicion">Cancelar</button>
    </div>
</div>


@code {
    // Referencia para dar focus al primer input
    private ElementReference inputDescripcionRef;

    private List<EstadoCivilDTO> estadocivil = new();
    private EstadoCivilDTO estadoCivilSeleccionado = new();

    private string razonBusqueda = string.Empty;
    private string estadoFiltro = string.Empty;

    private int PaginaActual = 1;
    private int PageSize = 8;
    private int TotalRegistros = 0;

    private bool esNuevo = false;

    protected override async Task OnInitializedAsync()
    {
        await CargarEstadoCivilAsync();
    }

    private async Task CargarEstadoCivilAsync()
    {
        try
        {
            var resultado = await estadoCivilRepo.GetEstadoCivilPaginados(PaginaActual, PageSize, razonBusqueda, estadoFiltro);
            estadocivil = resultado.Items;
            TotalRegistros = resultado.TotalItems;
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error al cargar estados civiles: {ex.Message}");
        }
    }

    private async void BuscarEstadoCivil()
    {
        PaginaActual = 1;
        await CargarEstadoCivilAsync();
    }

    private string ObtenerNombreEstado(string? estado)
    {
        return estado switch
        {
            "a" => "Activo",
            "p" => "Pasivo",
            _ => "Desconocido"
        };
    }

    private void SeleccionarEstadoCivil(EstadoCivilDTO estado)
    {
        estadoCivilSeleccionado = new EstadoCivilDTO
            {
                Idestadocivil = estado.Idestadocivil,
                Descripcion = estado.Descripcion,
                Estado = estado.Estado
            };
        esNuevo = false;
    }

    private async void NuevoRegistro()
    {
        estadoCivilSeleccionado = new EstadoCivilDTO();
        esNuevo = true;

        // Espera al render para poner focus
        await Task.Yield();
        await JS.InvokeVoidAsync("eval", "document.querySelector('[placeholder=\"Descripción\"]').focus()");
    }

    private async Task GuardarCambios()
    {
        try
        {
            if (esNuevo)
                await estadoCivilRepo.InsertEstadoCivil(estadoCivilSeleccionado);
            else
                await estadoCivilRepo.UpdateEstadoCivil(estadoCivilSeleccionado);

            await CargarEstadoCivilAsync();
            estadoCivilSeleccionado = new EstadoCivilDTO();
            esNuevo = false;
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error al guardar: {ex.Message}");
        }
    }

    private async Task EliminarEstadoCivil()
    {
        bool confirm = await JS.InvokeAsync<bool>("confirm", "¿Estás seguro de eliminar este estado civil?");
        if (confirm)
        {
            await estadoCivilRepo.DeleteEstadoCivilById(estadoCivilSeleccionado.Idestadocivil);
            await CargarEstadoCivilAsync();
            estadoCivilSeleccionado = new EstadoCivilDTO();
        }
    }

    private void CancelarEdicion()
    {
        estadoCivilSeleccionado = new EstadoCivilDTO();
        esNuevo = false;
    }

    private async Task OnPageChangedAsync(int nuevaPagina)
    {
        PaginaActual = nuevaPagina;
        await CargarEstadoCivilAsync();
    }

    private bool PuedeGuardar => !string.IsNullOrWhiteSpace(estadoCivilSeleccionado.Descripcion);
    private bool PuedeEliminar => !esNuevo && estadoCivilSeleccionado.Idestadocivil > 0;
}
este es el modelo como quieroi NivelEduacion
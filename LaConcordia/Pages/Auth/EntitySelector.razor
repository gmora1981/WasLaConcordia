@using LaConcordia.Model
@using Microsoft.AspNetCore.Components.Web
<link href="css/EntitySelector.css" rel="stylesheet" />
<div class="entity-selector">
    @if (EntityType == "user")
    {
        <div class="selector-header">
            <h4>@Title</h4>
            @if (!string.IsNullOrEmpty(Description))
            {
                <p class="selector-description">@Description</p>
            }
        </div>

        <div class="search-box">
            <i class="fas fa-search"></i>
            <input type="text"
                   placeholder="Buscar usuario..."
                   @bind="searchTerm"
                   @bind:event="oninput"
                   @onkeyup="FilterUsers" />
        </div>

        @if (isLoading)
        {
            <div class="loading-container">
                <div class="loading-spinner"></div>
                <p>Cargando usuarios...</p>
            </div>
        }
        else
        {
            <div class="users-grid" style="max-height: 300px; overflow-y: auto;">
                @if (filteredUsers != null && filteredUsers.Any())
                {
                    @foreach (var user in filteredUsers.Take(10))
                    {
                        <div class="user-card @(IsUserSelected(user) ? "selected" : "")"
                             @onclick="() => ToggleUserSelection(user)">
                            <div class="user-avatar">
                                @((!string.IsNullOrEmpty(user.FirstName) ? user.FirstName.Substring(0, 1).ToUpper() : "?"))
                            </div>
                            <div class="user-info">
                                <div class="user-name">@user.FirstName @user.LastName</div>
                                <div class="user-email">@user.Email</div>
                            </div>
                            @if (IsUserSelected(user))
                            {
                                <i class="fas fa-check-circle selection-icon"></i>
                            }
                        </div>
                    }
                }
                else if (!string.IsNullOrEmpty(searchTerm))
                {
                    <div class="empty-state">
                        <i class="fas fa-search"></i>
                        <p>No se encontraron usuarios para "@searchTerm"</p>
                    </div>
                }
                else if (Users != null && Users.Any())
                {
                    <div class="empty-state">
                        <i class="fas fa-search"></i>
                        <p>Use la búsqueda para encontrar usuarios</p>
                        <small>@Users.Count usuarios disponibles</small>
                    </div>
                }
                else
                {
                    <div class="empty-state">
                        <i class="fas fa-user-slash"></i>
                        <p>No se encontraron usuarios</p>
                    </div>
                }
            </div>
        }
    }
    else if (EntityType == "role")
    {
        <div class="selector-header">
            <h4>@Title</h4>
            @if (!string.IsNullOrEmpty(Description))
            {
                <p class="selector-description">@Description</p>
            }
        </div>

        @if (isLoading)
        {
            <div class="loading-container">
                <div class="loading-spinner"></div>
                <p>Cargando roles...</p>
            </div>
        }
        else
        {
            <div class="roles-grid">
                @if (availableRoles != null && availableRoles.Any())
                {
                    @foreach (var role in availableRoles)
                    {
                        <div class="role-card @(IsRoleSelected(role) ? "selected" : "")"
                             @onclick="() => ToggleRoleSelection(role)">
                            <div class="role-icon">
                                <i class="fas @(role.RoleName == "Admin" ? "fa-crown" : "fa-user-tag")"></i>
                            </div>
                            <div class="role-info">
                                <div class="role-name">@role.RoleName</div>
                                <div class="role-users">@GetRoleUsersCount(role) usuarios</div>
                            </div>
                            @if (IsRoleSelected(role))
                            {
                                <i class="fas fa-check-circle selection-icon"></i>
                            }
                        </div>
                    }
                }
                else
                {
                    <div class="empty-state">
                        <i class="fas fa-user-tag"></i>
                        <p>No se encontraron roles</p>
                    </div>
                }
            </div>
        }
    }

    @if (ShowSelectedInfo)
    {
        <div class="selected-info">
            @if (SelectedUser != null)
            {
                <div class="selected-entity">
                    <strong>Seleccionado:</strong> @SelectedUser.FirstName @SelectedUser.LastName (@SelectedUser.Email)
                </div>
            }
            else if (SelectedRole != null)
            {
                <div class="selected-entity">
                    <strong>Seleccionado:</strong> @SelectedRole.RoleName (@GetRoleUsersCount(SelectedRole) usuarios)
                </div>
            }
        </div>
    }
</div>

@code {
    [Parameter] public string EntityType { get; set; } = "user"; // "user" o "role"
    [Parameter] public string Title { get; set; } = "";
    [Parameter] public string Description { get; set; } = "";
    [Parameter] public List<UserDTO> Users { get; set; } = new();
    [Parameter] public List<RoleDTO> Roles { get; set; } = new();
    [Parameter] public UserDTO? SelectedUser { get; set; }
    [Parameter] public RoleDTO? SelectedRole { get; set; }
    [Parameter] public EventCallback<UserDTO> OnUserSelected { get; set; }
    [Parameter] public EventCallback<RoleDTO> OnRoleSelected { get; set; }
    [Parameter] public EventCallback OnSelectionCleared { get; set; }
    [Parameter] public bool AllowClear { get; set; } = true;
    [Parameter] public bool ShowSelectedInfo { get; set; } = false;
    [Parameter] public Func<RoleDTO, int> GetRoleUsersCount { get; set; } = (role) => 0;

    private string searchTerm = "";
    private List<UserDTO> filteredUsers = new();
    private List<RoleDTO> availableRoles = new();
    private bool isLoading = false;

    protected override async Task OnParametersSetAsync()
    {
        Console.WriteLine($"🔄 EntitySelector OnParametersSetAsync - EntityType: {EntityType}");

        if (EntityType == "user")
        {
            Console.WriteLine($"📊 Users disponibles: {Users?.Count ?? 0}");
            availableRoles = new List<RoleDTO>(); // Limpiar roles cuando es usuario
            FilterUsers();
        }
        else if (EntityType == "role")
        {
            Console.WriteLine($"📊 Roles recibidos: {Roles?.Count ?? 0}");
            availableRoles = Roles ?? new List<RoleDTO>();
            filteredUsers = new List<UserDTO>(); // Limpiar usuarios cuando es rol
            searchTerm = ""; // Limpiar búsqueda
        }

        StateHasChanged();
    }

    private void FilterUsers()
    {
        if (Users == null || !Users.Any())
        {
            filteredUsers = new List<UserDTO>();
            return;
        }

        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredUsers = new List<UserDTO>();
        }
        else
        {
            var searchLower = searchTerm.ToLower();
            filteredUsers = Users.Where(u =>
                (u.Email?.ToLower().Contains(searchLower) == true) ||
                (u.FirstName?.ToLower().Contains(searchLower) == true) ||
                (u.LastName?.ToLower().Contains(searchLower) == true)
            ).ToList();

            Console.WriteLine($"🔍 Búsqueda '{searchTerm}': {filteredUsers.Count} resultados de {Users.Count} usuarios");
        }
        StateHasChanged();
    }

    private async Task ToggleUserSelection(UserDTO user)
    {
        Console.WriteLine($"👤 Usuario seleccionado: {user.FirstName} {user.LastName}");
        SelectedUser = user;
        SelectedRole = null; // Limpiar rol si se selecciona usuario
        searchTerm = "";
        filteredUsers = new List<UserDTO>();
        await OnUserSelected.InvokeAsync(user);
        StateHasChanged();
    }

    private async Task ToggleRoleSelection(RoleDTO role)
    {
        Console.WriteLine($"🏷️ Rol seleccionado: {role.RoleName}");
        SelectedRole = role;
        SelectedUser = null; // Limpiar usuario si se selecciona rol
        await OnRoleSelected.InvokeAsync(role);
        StateHasChanged();
    }

    private bool IsUserSelected(UserDTO user)
    {
        return SelectedUser?.UserId == user.UserId;
    }

    private bool IsRoleSelected(RoleDTO role)
    {
        return SelectedRole?.RoleId == role.RoleId;
    }
}
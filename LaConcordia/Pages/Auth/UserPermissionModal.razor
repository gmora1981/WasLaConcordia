@using LaConcordia.Model
@using Identity.Api.Interfaces
@using System.Text
@using System.Text.Json
@inject IPermissionService permissionService
@inject IJSRuntime JSRuntime
@inject HttpClient httpClient

@if (showModal && selectedUser != null)
{
    <div class="modal-modern" @onclick="CloseModalBackground" @onclick:stopPropagation="false">
        <div class="modal-content-modern" style="max-width: 800px;" @onclick:stopPropagation="true">
            <div class="modal-header-modern">
                <h3 class="modal-title-modern">
                    <i class="fas fa-key"></i> Gestionar Permisos - @selectedUser.FirstName @selectedUser.LastName
                </h3>
                <button type="button" class="btn-close-modern" @onclick="CloseModal">
                    <i class="fas fa-times"></i>
                </button>
            </div>

            <div class="modal-body-modern">
                <!-- Pestañas del modal -->
                <div class="tab-container">
                    <div class="tab-headers">
                        <button class="tab-header @GetTabActiveClass("individual")"
                                @onclick="@(() => SetActiveModalTab("individual"))">
                            <i class="fas fa-user"></i> Permisos Individuales
                        </button>
                        <button class="tab-header @GetTabActiveClass("effective")"
                                @onclick="@(() => SetActiveModalTab("effective"))">
                            <i class="fas fa-eye"></i> Permisos Efectivos
                        </button>
                        <button class="tab-header @GetTabActiveClass("bulk")"
                                @onclick="@(() => SetActiveModalTab("bulk"))">
                            <i class="fas fa-list"></i> Asignación Masiva
                        </button>
                    </div>

                    <div class="tab-content" style="min-height: 400px; margin-top: 1rem;">
                        @if (activeModalTab == "individual")
                        {
                            <div class="tab-pane">
                                @if (isLoadingPermissions)
                                {
                                    <div class="loading-container">
                                        <div class="loading-spinner"></div>
                                        <p>Cargando permisos individuales...</p>
                                    </div>
                                }
                                else if (userPermissions != null && userPermissions.Any())
                                {
                                    <div class="permissions-list">
                                        @foreach (var permission in userPermissions)
                                        {
                                            <div class="permission-item">
                                                <div class="permission-header">
                                                    <h5>@permission.NavigationItemTitle</h5>
                                                    <small class="text-muted">ID: @permission.NavigationItemId</small>
                                                </div>
                                                <div class="permission-checkboxes">
                                                    <div class="form-check">
                                                        <input type="checkbox" class="form-check-input" @bind="permission.CanView" />
                                                        <label class="form-check-label">Ver</label>
                                                    </div>
                                                    <div class="form-check">
                                                        <input type="checkbox" class="form-check-input" @bind="permission.CanCreate" />
                                                        <label class="form-check-label">Crear</label>
                                                    </div>
                                                    <div class="form-check">
                                                        <input type="checkbox" class="form-check-input" @bind="permission.CanEdit" />
                                                        <label class="form-check-label">Editar</label>
                                                    </div>
                                                    <div class="form-check">
                                                        <input type="checkbox" class="form-check-input" @bind="permission.CanDelete" />
                                                        <label class="form-check-label">Eliminar</label>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                }
                                else
                                {
                                    <div class="empty-state">
                                        <i class="fas fa-lock"></i>
                                        <p>Este usuario no tiene permisos individuales asignados</p>
                                        <small class="text-muted">Los permisos pueden venir de sus roles</small>
                                    </div>
                                }
                            </div>
                        }
                        else if (activeModalTab == "effective")
                        {
                            <div class="tab-pane">
                                <div class="tab-description">
                                    <p><strong>Permisos Efectivos</strong> - Combinación de permisos directos y permisos heredados de roles</p>
                                </div>

                                @if (isLoadingEffective)
                                {
                                    <div class="loading-container">
                                        <div class="loading-spinner"></div>
                                        <p>Cargando permisos efectivos...</p>
                                    </div>
                                }
                                else if (effectivePermissions != null && effectivePermissions.Any())
                                {
                                    <div class="permissions-list">
                                        @foreach (var permission in effectivePermissions)
                                        {
                                            <div class="permission-item effective">
                                                <div class="permission-header">
                                                    <h5>
                                                        @if (!string.IsNullOrEmpty(permission.NavigationItemTitle))
                                                        {
                                                            @permission.NavigationItemTitle
                                                        }
                                                        else
                                                        {
                                                            <text>Item ID: @permission.NavigationItemId</text>
                                                        }
                                                    </h5>
                                                    <span class="badge badge-info">Efectivo</span>
                                                </div>
                                                <div class="permission-display">
                                                    @if (permission.CanView)
                                                    {
                                                        <span class="badge badge-success">Ver</span>
                                                    }
                                                    @if (permission.CanCreate)
                                                    {
                                                        <span class="badge badge-success">Crear</span>
                                                    }
                                                    @if (permission.CanEdit)
                                                    {
                                                        <span class="badge badge-success">Editar</span>
                                                    }
                                                    @if (permission.CanDelete)
                                                    {
                                                        <span class="badge badge-success">Eliminar</span>
                                                    }
                                                    @if (!permission.CanView && !permission.CanCreate && !permission.CanEdit && !permission.CanDelete)
                                                    {
                                                        <span class="badge badge-secondary">Sin permisos</span>
                                                    }
                                                </div>
                                            </div>
                                        }
                                    </div>
                                }
                                else
                                {
                                    <div class="empty-state">
                                        <i class="fas fa-ban"></i>
                                        <p>Este usuario no tiene permisos efectivos</p>
                                        <small class="text-muted">Puede que necesite roles asignados o permisos directos</small>
                                    </div>
                                }
                            </div>
                        }
                        else if (activeModalTab == "bulk")
                        {
                            <div class="tab-pane">
                                <h4>Asignación Masiva de Permisos</h4>
                                <p class="text-muted">Seleccione los elementos de navegación y los tipos de permisos a asignar:</p>

                                @if (isLoadingBulk)
                                {
                                    <div class="loading-container">
                                        <div class="loading-spinner"></div>
                                        <p>Cargando elementos de navegación...</p>
                                    </div>
                                }
                                else if (availableNavigationItems != null && availableNavigationItems.Any())
                                {
                                    <div class="bulk-assignment-section">
                                        <!-- Seleccionar todos los permisos -->
                                        <div class="bulk-controls">
                                            <div class="permission-type-selector">
                                                <h5>Tipos de Permisos:</h5>
                                                <div class="permission-checkboxes">
                                                    <div class="form-check">
                                                        <input type="checkbox" class="form-check-input" @bind="bulkCanView" />
                                                        <label class="form-check-label">Ver</label>
                                                    </div>
                                                    <div class="form-check">
                                                        <input type="checkbox" class="form-check-input" @bind="bulkCanCreate" />
                                                        <label class="form-check-label">Crear</label>
                                                    </div>
                                                    <div class="form-check">
                                                        <input type="checkbox" class="form-check-input" @bind="bulkCanEdit" />
                                                        <label class="form-check-label">Editar</label>
                                                    </div>
                                                    <div class="form-check">
                                                        <input type="checkbox" class="form-check-input" @bind="bulkCanDelete" />
                                                        <label class="form-check-label">Eliminar</label>
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="bulk-actions">
                                                <button type="button" class="btn btn-sm btn-outline-primary" @onclick="SelectAllNavigationItems">
                                                    Seleccionar Todos
                                                </button>
                                                <button type="button" class="btn btn-sm btn-outline-secondary" @onclick="ClearAllNavigationItems">
                                                    Limpiar Selección
                                                </button>
                                            </div>
                                        </div>

                                        <!-- Lista de elementos de navegación -->
                                        <div class="navigation-items-list">
                                            <h5>Elementos de Navegación:</h5>
                                            @foreach (var item in availableNavigationItems)
                                            {
                                                <div class="navigation-item-checkbox">
                                                    <div class="form-check">
                                                        <input type="checkbox" class="form-check-input"
                                                               @bind="item.IsSelected"
                                                               id="nav-@item.Id" />
                                                        <label class="form-check-label" for="nav-@item.Id">
                                                            @if (!string.IsNullOrEmpty(item.Icon))
                                                            {
                                                                <i class="@item.Icon"></i>
                                                            }
                                                            @item.Title
                                                            @if (!string.IsNullOrEmpty(item.RequiredRole))
                                                            {
                                                                <span class="badge badge-warning">@item.RequiredRole</span>
                                                            }
                                                        </label>
                                                    </div>
                                                </div>
                                            }
                                        </div>

                                        <!-- Botón de asignación -->
                                        <div class="bulk-assignment-footer">
                                            <button type="button"
                                                    class="btn-modern btn-primary-modern"
                                                    @onclick="ApplyBulkAssignment"
                                                    disabled="@(isApplyingBulk || !HasSelectedItems() || !HasSelectedPermissions())">
                                                @if (isApplyingBulk)
                                                {
                                                    <div class="spinner-border"></div>
                                                    <text>Aplicando...</text>
                                                }
                                                else
                                                {
                                                    <i class="fas fa-check"></i>
                                                    <text>Aplicar Permisos (@GetSelectedItemsCount() elementos)</text>
                                                }
                                            </button>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <div class="empty-state">
                                        <i class="fas fa-sitemap"></i>
                                        <p>No hay elementos de navegación disponibles</p>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>

            <div class="modal-footer-modern">
                @if (activeModalTab == "individual" && userPermissions != null && userPermissions.Any())
                {
                    <button type="button" class="btn-modern btn-primary-modern" @onclick="SavePermissions" disabled="@isSaving">
                        @if (isSaving)
                        {
                            <div class="spinner-border"></div>
                            <text>Guardando...</text>
                        }
                        else
                        {
                            <i class="fas fa-save"></i>
                            <text>Guardar Cambios</text>
                        }
                    </button>
                }
                <button type="button" class="btn-modern btn-secondary-modern" @onclick="CloseModal">
                    Cerrar
                </button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool showModal { get; set; } = false;
    [Parameter] public UserDTO? selectedUser { get; set; }
    [Parameter] public EventCallback OnModalClosed { get; set; }

    private string activeModalTab = "individual";
    private bool isLoadingPermissions = false;
    private bool isLoadingEffective = false;
    private bool isLoadingBulk = false;
    private bool isSaving = false;
    private bool isApplyingBulk = false;

    private List<NavigationPermissionDto> userPermissions = new();
    private List<NavigationPermissionDto> effectivePermissions = new();
    private List<BulkNavigationItem> availableNavigationItems = new();

    // Propiedades para asignación masiva
    private bool bulkCanView = false;
    private bool bulkCanCreate = false;
    private bool bulkCanEdit = false;
    private bool bulkCanDelete = false;

    // Clase auxiliar para elementos de navegación con selección
    public class BulkNavigationItem
    {
        public int Id { get; set; }
        public string Title { get; set; } = "";
        public string? Icon { get; set; }
        public string? RequiredRole { get; set; }
        public bool IsSelected { get; set; } = false;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (showModal && selectedUser != null && activeModalTab == "individual")
        {
            await LoadUserPermissions();
        }
    }

    private async Task LoadUserPermissions()
    {
        if (selectedUser == null) return;

        try
        {
            isLoadingPermissions = true;
            StateHasChanged();

            var permissions = await permissionService.GetUserPermissionsAsync(selectedUser.UserId);
            userPermissions = permissions?.Permissions?.ToList() ?? new List<NavigationPermissionDto>();

            Console.WriteLine($"✅ Permisos cargados: {userPermissions.Count} items");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Error cargando permisos: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", $"Error al cargar permisos: {ex.Message}");
        }
        finally
        {
            isLoadingPermissions = false;
            StateHasChanged();
        }
    }

    private async Task LoadEffectivePermissions()
    {
        if (selectedUser == null) return;

        try
        {
            isLoadingEffective = true;
            StateHasChanged();

            effectivePermissions = await permissionService.GetEffectivePermissionsAsync(selectedUser.UserId);
            Console.WriteLine($"✅ Permisos efectivos cargados: {effectivePermissions.Count} items");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Error cargando permisos efectivos: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", $"Error al cargar permisos efectivos: {ex.Message}");
        }
        finally
        {
            isLoadingEffective = false;
            StateHasChanged();
        }
    }

    private async Task SetActiveModalTab(string tab)
    {
        activeModalTab = tab;

        if (tab == "effective" && effectivePermissions.Count == 0)
        {
            await LoadEffectivePermissions();
        }
        else if (tab == "bulk" && availableNavigationItems.Count == 0)
        {
            await LoadNavigationItemsForBulk();
        }

        StateHasChanged();
    }

    private async Task LoadNavigationItemsForBulk()
    {
        if (selectedUser == null) return;

        try
        {
            isLoadingBulk = true;
            StateHasChanged();

            // Simulamos la carga de elementos de navegación
            // En una implementación real, cargarías desde tu API de navegación
            availableNavigationItems = new List<BulkNavigationItem>
            {
                new BulkNavigationItem { Id = 1, Title = "Dashboard", Icon = "fas fa-tachometer-alt" },
                new BulkNavigationItem { Id = 2, Title = "Administración", Icon = "fas fa-cogs" },
                new BulkNavigationItem { Id = 3, Title = "Usuarios", Icon = "fas fa-users" },
                new BulkNavigationItem { Id = 4, Title = "Roles", Icon = "fas fa-user-tag" },
                new BulkNavigationItem { Id = 5, Title = "Permisos", Icon = "fas fa-key" },
                new BulkNavigationItem { Id = 6, Title = "Navegación", Icon = "fas fa-sitemap" },
                new BulkNavigationItem { Id = 7, Title = "Configuración", Icon = "fas fa-cog" }
            };

            Console.WriteLine($"✅ Elementos de navegación cargados: {availableNavigationItems.Count}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Error cargando elementos de navegación: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", $"Error al cargar elementos: {ex.Message}");
        }
        finally
        {
            isLoadingBulk = false;
            StateHasChanged();
        }
    }

    private void SelectAllNavigationItems()
    {
        foreach (var item in availableNavigationItems)
        {
            item.IsSelected = true;
        }
        StateHasChanged();
    }

    private void ClearAllNavigationItems()
    {
        foreach (var item in availableNavigationItems)
        {
            item.IsSelected = false;
        }
        StateHasChanged();
    }

    private bool HasSelectedItems()
    {
        return availableNavigationItems.Any(x => x.IsSelected);
    }

    private bool HasSelectedPermissions()
    {
        return bulkCanView || bulkCanCreate || bulkCanEdit || bulkCanDelete;
    }

    private int GetSelectedItemsCount()
    {
        return availableNavigationItems.Count(x => x.IsSelected);
    }

    private async Task ApplyBulkAssignment()
    {
        if (selectedUser == null || !HasSelectedItems() || !HasSelectedPermissions())
            return;

        try
        {
            isApplyingBulk = true;
            StateHasChanged();

            var selectedItems = availableNavigationItems.Where(x => x.IsSelected).ToList();
            var selectedItemIds = selectedItems.Select(x => x.Id).ToList();

            var bulkDto = new
            {
                NavigationItemIds = selectedItemIds,
                CanView = bulkCanView,
                CanCreate = bulkCanCreate,
                CanEdit = bulkCanEdit,
                CanDelete = bulkCanDelete
            };

            var json = JsonSerializer.Serialize(bulkDto);
            var content = new StringContent(json, Encoding.UTF8, "application/json");

            // Llamada a la API de asignación masiva usando HttpClient
            var response = await httpClient.PostAsync($"/api/permissions/user/{selectedUser.UserId}/bulk-assign", content);

            if (response.IsSuccessStatusCode)
            {
                var message = $"✅ Permisos asignados exitosamente a {selectedItems.Count} elementos:\n\n";
                message += string.Join("\n", selectedItems.Select(x => $"• {x.Title}"));

                var permissionTypes = new List<string>();
                if (bulkCanView) permissionTypes.Add("Ver");
                if (bulkCanCreate) permissionTypes.Add("Crear");
                if (bulkCanEdit) permissionTypes.Add("Editar");
                if (bulkCanDelete) permissionTypes.Add("Eliminar");

                message += $"\n\nPermisos: {string.Join(", ", permissionTypes)}";

                await JSRuntime.InvokeVoidAsync("alert", message);

                // Limpiar selecciones
                ClearAllNavigationItems();
                bulkCanView = bulkCanCreate = bulkCanEdit = bulkCanDelete = false;

                // Recargar permisos individuales si está en esa pestaña
                if (activeModalTab == "individual")
                {
                    await LoadUserPermissions();
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                throw new Exception($"Error del servidor: {response.StatusCode} - {errorContent}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error al aplicar asignación masiva: {ex.Message}");
        }
        finally
        {
            isApplyingBulk = false;
            StateHasChanged();
        }
    }

    private string GetTabActiveClass(string tab)
    {
        return activeModalTab == tab ? "active" : "";
    }



    private async Task SavePermissions()
    {
        if (selectedUser == null || !userPermissions.Any()) return;

        try
        {
            isSaving = true;
            StateHasChanged();

            var saveCount = 0;
            var errorCount = 0;

            // Guardar cada permiso modificado usando HttpClient
            foreach (var permission in userPermissions)
            {
                try
                {
                    var updateDto = new
                    {
                        UserId = selectedUser.UserId,
                        NavigationItemId = permission.NavigationItemId,
                        CanView = permission.CanView,
                        CanCreate = permission.CanCreate,
                        CanEdit = permission.CanEdit,
                        CanDelete = permission.CanDelete
                    };

                    var json = JsonSerializer.Serialize(updateDto);
                    var content = new StringContent(json, Encoding.UTF8, "application/json");

                    var response = await httpClient.PostAsync("/api/permissions/user/update", content);

                    if (response.IsSuccessStatusCode)
                    {
                        saveCount++;
                        Console.WriteLine($"✅ Permiso guardado: {permission.NavigationItemTitle}");
                    }
                    else
                    {
                        var errorContent = await response.Content.ReadAsStringAsync();
                        Console.WriteLine($"❌ Error guardando {permission.NavigationItemTitle}: {response.StatusCode} - {errorContent}");
                        errorCount++;
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"❌ Excepción guardando permiso {permission.NavigationItemTitle}: {ex.Message}");
                    errorCount++;
                }
            }

            var message = saveCount > 0
                ? $"✅ {saveCount} permisos guardados exitosamente"
                : "❌ No se pudieron guardar los permisos";

            if (errorCount > 0)
            {
                message += $"\n⚠️ {errorCount} permisos tuvieron errores";
            }

            await JSRuntime.InvokeVoidAsync("alert", message);

            if (saveCount > 0)
            {
                // Recargar permisos para mostrar los cambios guardados
                await LoadUserPermissions();
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error al guardar permisos: {ex.Message}");
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }



    private async Task CloseModal()
    {
        // Reset state
        activeModalTab = "individual";
        userPermissions.Clear();
        effectivePermissions.Clear();

        // Notificar al padre que el modal se cerró
        await OnModalClosed.InvokeAsync();
    }

    private async Task CloseModalBackground(MouseEventArgs e)
    {
        // Solo cerrar si el click fue en el background, no en el contenido
        await CloseModal();
    }
}

<style>
    .permission-item {
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        padding: 1rem;
        margin-bottom: 1rem;
        background: white;
    }

        .permission-item.effective {
            border-left: 4px solid #17a2b8;
            background: #f8fbff;
            border: 1px solid #bee5eb;
        }

    .tab-description {
        background: #e7f3ff;
        padding: 1rem;
        border-radius: 6px;
        margin-bottom: 1.5rem;
        border-left: 4px solid #17a2b8;
    }

        .tab-description p {
            margin: 0;
            color: #0c5460;
            font-size: 0.9rem;
        }

    .permission-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 0.75rem;
    }

        .permission-header h5 {
            margin: 0;
            color: #2c3e50;
        }

    .permission-checkboxes {
        display: flex;
        gap: 1.5rem;
        flex-wrap: wrap;
    }

    .permission-display {
        display: flex;
        gap: 0.5rem;
        flex-wrap: wrap;
    }

    .form-check {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .alert {
        padding: 1rem;
        margin-bottom: 1rem;
        border: 1px solid transparent;
        border-radius: 0.375rem;
    }

    .alert-info {
        color: #0c5460;
        background-color: #d1ecf1;
        border-color: #bee5eb;
    }

    /* Estilos para asignación masiva */
    .bulk-assignment-section {
        background: #f8f9fa;
        padding: 1.5rem;
        border-radius: 8px;
        margin-bottom: 1rem;
    }

    .bulk-controls {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        margin-bottom: 1.5rem;
        gap: 2rem;
    }

    .permission-type-selector h5 {
        margin: 0 0 0.75rem 0;
        color: #2c3e50;
    }

    .bulk-actions {
        display: flex;
        gap: 0.5rem;
    }

    .btn {
        padding: 0.375rem 0.75rem;
        border-radius: 0.375rem;
        border: 1px solid;
        cursor: pointer;
        font-size: 0.875rem;
        text-decoration: none;
        display: inline-block;
    }

    .btn-sm {
        padding: 0.25rem 0.5rem;
        font-size: 0.8125rem;
    }

    .btn-outline-primary {
        color: #667eea;
        border-color: #667eea;
        background: transparent;
    }

        .btn-outline-primary:hover {
            background: #667eea;
            color: white;
        }

    .btn-outline-secondary {
        color: #6c757d;
        border-color: #6c757d;
        background: transparent;
    }

        .btn-outline-secondary:hover {
            background: #6c757d;
            color: white;
        }

    .navigation-items-list {
        margin-bottom: 1.5rem;
    }

        .navigation-items-list h5 {
            margin: 0 0 1rem 0;
            color: #2c3e50;
        }

    .navigation-item-checkbox {
        background: white;
        border: 1px solid #e0e0e0;
        border-radius: 6px;
        padding: 0.75rem;
        margin-bottom: 0.5rem;
        transition: all 0.2s ease;
    }

        .navigation-item-checkbox:hover {
            background: #f8f9fa;
            border-color: #667eea;
        }

        .navigation-item-checkbox .form-check-label {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            cursor: pointer;
            margin: 0;
            font-weight: 500;
        }

    .badge {
        display: inline-block;
        padding: 0.35em 0.65em;
        font-size: 0.75em;
        font-weight: 600;
        line-height: 1;
        color: #fff;
        text-align: center;
        white-space: nowrap;
        vertical-align: baseline;
        border-radius: 0.375rem;
        margin-right: 0.25rem;
        margin-bottom: 0.25rem;
    }

    .badge-success {
        background-color: #28a745;
        color: #fff;
    }

    .badge-secondary {
        background-color: #6c757d;
        color: #fff;
    }

    .badge-info {
        background-color: #17a2b8;
        color: #fff;
    }

    .badge-warning {
        background-color: #ffc107;
        color: #000;
    }

    .bulk-assignment-footer {
        text-align: center;
        padding-top: 1rem;
        border-top: 1px solid #e0e0e0;
    }
</style>
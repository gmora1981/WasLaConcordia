@using LaConcordia.Model
@inject IJSRuntime JSRuntime
<link href="css/AuditLogModal.css" rel="stylesheet" />
@if (showModal)
{
    <div class="modal-modern" @onclick="CloseModalBackground" @onclick:stopPropagation="false">
        <div class="modal-content-modern" style="max-width: 900px;" @onclick:stopPropagation="true">
            <div class="modal-header-modern modal-header-warning">
                <h3 class="modal-title-modern">
                    <i class="fas fa-history"></i> Auditoría de Permisos
                </h3>
                <button type="button" class="btn-close-modern" @onclick="CloseModal">
                    <i class="fas fa-times"></i>
                </button>
            </div>

            <div class="modal-body-modern">
                <!-- Filtros de auditoría -->
                <div class="audit-filters">
                    <div class="filter-group">
                        <label><i class="fas fa-calendar"></i> Rango de Fechas</label>
                        <div class="date-range">
                            <input type="date" class="form-control" @bind="startDate" max="@endDate.ToString("yyyy-MM-dd")" />
                            <span class="date-separator">hasta</span>
                            <input type="date" class="form-control" @bind="endDate" max="@DateTime.Now.ToString("yyyy-MM-dd")" />
                        </div>
                    </div>

                    <div class="filter-group">
                        <label><i class="fas fa-filter"></i> Tipo de Cambio</label>
                        <div class="filter-buttons">
                            <button class="filter-btn @(filterType == "all" ? "active" : "")"
                                    @onclick="@(() => SetFilterType(" all"))">
                                Todos
                            </button>
                            <button class="filter-btn @(filterType == "users" ? "active" : "")"
                                    @onclick="@(() => SetFilterType(" users"))">
                                Usuarios
                            </button>
                            <button class="filter-btn @(filterType == "roles" ? "active" : "")"
                                    @onclick="@(() => SetFilterType(" roles"))">
                                Roles
                            </button>
                        </div>
                    </div>

                    <div class="filter-group">
                        <label><i class="fas fa-search"></i> Buscar</label>
                        <input type="text" class="form-control" placeholder="Buscar por usuario, rol o acción..."
                               @bind="searchTerm" @bind:event="oninput" />
                    </div>

                    <button class="btn-modern btn-primary-modern" @onclick="LoadAuditData">
                        <i class="fas fa-sync"></i> Actualizar
                    </button>
                </div>

                <!-- Estadísticas -->
                <div class="audit-stats">
                    <div class="stat-box">
                        <i class="fas fa-clipboard-list"></i>
                        <div class="stat-info">
                            <h4>@totalChanges</h4>
                            <p>Cambios Totales</p>
                        </div>
                    </div>
                    <div class="stat-box">
                        <i class="fas fa-user-plus"></i>
                        <div class="stat-info">
                            <h4>@userChanges</h4>
                            <p>Cambios en Usuarios</p>
                        </div>
                    </div>
                    <div class="stat-box">
                        <i class="fas fa-user-tag"></i>
                        <div class="stat-info">
                            <h4>@roleChanges</h4>
                            <p>Cambios en Roles</p>
                        </div>
                    </div>
                    <div class="stat-box">
                        <i class="fas fa-user-shield"></i>
                        <div class="stat-info">
                            <h4>@uniqueAdmins</h4>
                            <p>Administradores</p>
                        </div>
                    </div>
                </div>

                <!-- Timeline de auditoría -->
                <div class="audit-timeline">
                    @if (isLoading)
                    {
                        <div class="loading-container">
                            <div class="simple-spinner"></div>
                            <p>Cargando auditoría...</p>
                        </div>
                    }
                    else if (GetFilteredAuditEntries().Any())
                    {
                        <div class="timeline">
                            @foreach (var entry in GetFilteredAuditEntries())
                            {
                                <div class="timeline-item @entry.Type">
                                    <div class="timeline-marker">
                                        <i class="fas @GetIconForEntry(entry)"></i>
                                    </div>
                                    <div class="timeline-content">
                                        <div class="timeline-header">
                                            <h5>@entry.Action</h5>
                                            <span class="timeline-date">@entry.Date.ToString("dd/MM/yyyy HH:mm")</span>
                                        </div>
                                        <div class="timeline-body">
                                            <p>@entry.Description</p>
                                            <div class="timeline-details">
                                                <span class="detail-item">
                                                    <i class="fas fa-user"></i> @entry.PerformedBy
                                                </span>
                                                <span class="detail-item">
                                                    <i class="fas @(entry.EntityType == "User" ? "fa-user" : "fa-user-tag")"></i>
                                                    @entry.EntityType: @entry.EntityName
                                                </span>
                                                @if (!string.IsNullOrEmpty(entry.NavigationItem))
                                                {
                                                    <span class="detail-item">
                                                        <i class="fas fa-sitemap"></i> @entry.NavigationItem
                                                    </span>
                                                }
                                            </div>
                                            @if (entry.Changes.Any())
                                            {
                                                <div class="timeline-changes">
                                                    <strong>Cambios:</strong>
                                                    <ul>
                                                        @foreach (var change in entry.Changes)
                                                        {
                                                            <li>@change</li>
                                                        }
                                                    </ul>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>

                        @if (GetFilteredAuditEntries().Count() > 10)
                        {
                            <div class="load-more">
                                <button class="btn-modern btn-secondary-modern" @onclick="LoadMore">
                                    <i class="fas fa-plus"></i> Cargar más
                                </button>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="empty-state">
                            <i class="fas fa-inbox"></i>
                            <h4>No hay registros de auditoría</h4>
                            <p>No se encontraron cambios en el período seleccionado</p>
                        </div>
                    }
                </div>
            </div>

            <div class="modal-footer-modern">
                <button type="button" class="btn-modern btn-primary-modern" @onclick="ExportAuditLog">
                    <i class="fas fa-download"></i> Exportar
                </button>
                <button type="button" class="btn-modern btn-secondary-modern" @onclick="CloseModal">
                    Cerrar
                </button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool showModal { get; set; } = false;
    [Parameter] public EventCallback OnModalClosed { get; set; }

    private DateTime startDate = DateTime.Now.AddDays(-30);
    private DateTime endDate = DateTime.Now;
    private string filterType = "all";
    private string searchTerm = "";
    private bool isLoading = false;
    private int itemsToShow = 10;

    // Estadísticas
    private int totalChanges = 0;
    private int userChanges = 0;
    private int roleChanges = 0;
    private int uniqueAdmins = 0;

    // Datos de auditoría
    private List<AuditEntry> auditEntries = new();

    // Clase para entradas de auditoría
    public class AuditEntry
    {
        public DateTime Date { get; set; }
        public string Action { get; set; } = "";
        public string Description { get; set; } = "";
        public string EntityType { get; set; } = "";
        public string EntityName { get; set; } = "";
        public string PerformedBy { get; set; } = "";
        public string NavigationItem { get; set; } = "";
        public string Type { get; set; } = ""; // "grant", "revoke", "modify"
        public List<string> Changes { get; set; } = new();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (showModal)
        {
            await LoadAuditData();
        }
    }

    private async Task LoadAuditData()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            // Simular una pequeña espera para mostrar el loading
            await Task.Delay(500);

            // Datos de ejemplo para la auditoría
            auditEntries = new List<AuditEntry>
            {
                new AuditEntry
                {
                    Date = DateTime.Now.AddHours(-2),
                    Action = "Permisos Otorgados",
                    Description = "Se otorgaron nuevos permisos al usuario",
                    EntityType = "User",
                    EntityName = "juan.perez@example.com",
                    PerformedBy = "admin@example.com",
                    NavigationItem = "Dashboard",
                    Type = "grant",
                    Changes = new List<string> { "Ver: ✓", "Crear: ✓" }
                },
                new AuditEntry
                {
                    Date = DateTime.Now.AddHours(-5),
                    Action = "Permisos Actualizados",
                    Description = "Se actualizaron los permisos del rol",
                    EntityType = "Role",
                    EntityName = "Editor",
                    PerformedBy = "admin@example.com",
                    NavigationItem = "Usuarios",
                    Type = "modify",
                    Changes = new List<string> { "Editar: ✓", "Eliminar: ✗" }
                },
                new AuditEntry
                {
                    Date = DateTime.Now.AddDays(-1),
                    Action = "Permisos Revocados",
                    Description = "Se revocaron permisos del usuario",
                    EntityType = "User",
                    EntityName = "maria.garcia@example.com",
                    PerformedBy = "admin@example.com",
                    NavigationItem = "Configuración",
                    Type = "revoke",
                    Changes = new List<string> { "Eliminar: ✗" }
                },
                new AuditEntry
                {
                    Date = DateTime.Now.AddDays(-2),
                    Action = "Permisos Creados",
                    Description = "Se asignaron permisos iniciales al rol",
                    EntityType = "Role",
                    EntityName = "Viewer",
                    PerformedBy = "system",
                    NavigationItem = "Reportes",
                    Type = "grant",
                    Changes = new List<string> { "Ver: ✓" }
                },
                new AuditEntry
                {
                    Date = DateTime.Now.AddDays(-3),
                    Action = "Permisos Modificados",
                    Description = "Se modificaron los permisos del usuario",
                    EntityType = "User",
                    EntityName = "carlos.lopez@example.com",
                    PerformedBy = "admin@example.com",
                    NavigationItem = "Navegación",
                    Type = "modify",
                    Changes = new List<string> { "Ver: ✓", "Crear: ✓", "Editar: ✓", "Eliminar: ✗" }
                }
            };

            // Ordenar por fecha descendente
            auditEntries = auditEntries.OrderByDescending(e => e.Date).ToList();

            // Calcular estadísticas
            CalculateStatistics();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error cargando auditoría: {ex.Message}");
            auditEntries = new List<AuditEntry>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void CalculateStatistics()
    {
        totalChanges = auditEntries.Count;
        userChanges = auditEntries.Count(e => e.EntityType == "User");
        roleChanges = auditEntries.Count(e => e.EntityType == "Role");
        uniqueAdmins = auditEntries.Select(e => e.PerformedBy).Distinct().Count();
    }

    private void SetFilterType(string type)
    {
        filterType = type;
        StateHasChanged();
    }

    private IEnumerable<AuditEntry> GetFilteredAuditEntries()
    {
        var filtered = auditEntries.AsEnumerable();

        // Filtrar por tipo
        if (filterType == "users")
            filtered = filtered.Where(e => e.EntityType == "User");
        else if (filterType == "roles")
            filtered = filtered.Where(e => e.EntityType == "Role");

        // Filtrar por búsqueda
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            var search = searchTerm.ToLower();
            filtered = filtered.Where(e =>
                e.EntityName.ToLower().Contains(search) ||
                e.PerformedBy.ToLower().Contains(search) ||
                e.Description.ToLower().Contains(search)
            );
        }

        return filtered.Take(itemsToShow);
    }

    private string GetIconForEntry(AuditEntry entry)
    {
        return entry.Type switch
        {
            "grant" => "fa-plus-circle",
            "revoke" => "fa-minus-circle",
            _ => "fa-edit"
        };
    }

    private void LoadMore()
    {
        itemsToShow += 10;
        StateHasChanged();
    }

    private async Task ExportAuditLog()
    {
        var exportData = new
        {
            Period = new { StartDate = startDate, EndDate = endDate },
            Statistics = new { totalChanges, userChanges, roleChanges, uniqueAdmins },
            Entries = GetFilteredAuditEntries().ToList()
        };

        var json = System.Text.Json.JsonSerializer.Serialize(exportData,
            new System.Text.Json.JsonSerializerOptions { WriteIndented = true });

        await JSRuntime.InvokeVoidAsync("downloadFile",
            $"auditoria-permisos-{DateTime.Now:yyyyMMdd}.json", json, "application/json");
    }

    private async Task CloseModal()
    {
        filterType = "all";
        searchTerm = "";
        itemsToShow = 10;
        await OnModalClosed.InvokeAsync();
    }

    private async Task CloseModalBackground(MouseEventArgs e)
    {
        await CloseModal();
    }
}


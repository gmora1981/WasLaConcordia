@using LaConcordia.Model
@using Identity.Api.Interfaces
@inject IUsersRepository usersRepository
@inject IJSRuntime JSRuntime
@inject HttpClient httpClient
<link href="css/CopyPermissionsToolModal.css" rel="stylesheet" />
@if (showModal)
{
    <div class="modal-modern" @onclick="CloseModalBackground" @onclick:stopPropagation="false">
        <div class="modal-content-modern" style="max-width: 800px;" @onclick:stopPropagation="true">
            <div class="modal-header-modern">
                <h3 class="modal-title-modern">
                    <i class="fas fa-copy"></i> Copiar Permisos
                </h3>
                <button type="button" class="btn-close-modern" @onclick="CloseModal">
                    <i class="fas fa-times"></i>
                </button>
            </div>

            <div class="modal-body-modern">
                <!-- Selector de tipo de entidad -->
                <div class="entity-type-selector">
                    <button class="type-btn @(entityType == "user" ? "active" : "")"
                            @onclick="@(() => SetEntityType("user"))">
                        <i class="fas fa-user"></i>
                        <span>Usuario a Usuario</span>
                    </button>
                    <button class="type-btn @(entityType == "role" ? "active" : "")"
                            @onclick="@(() => SetEntityType("role"))">
                        <i class="fas fa-user-tag"></i>
                        <span>Rol a Rol</span>
                    </button>
                    <button class="type-btn @(entityType == "roleToUser" ? "active" : "")"
                            @onclick="@(() => SetEntityType("roleToUser"))">
                        <i class="fas fa-exchange-alt"></i>
                        <span>Rol a Usuario</span>
                    </button>
                </div>

                <div class="copy-sections">
                    <!-- Sección Origen -->
                    <div class="copy-section">
                        <h4><i class="fas fa-file-export"></i> Origen (Copiar DE)</h4>
                        <div class="section-content">
                            @if (isLoading)
                            {
                                <div class="loading-container">
                                    <div class="simple-spinner"></div>
                                    <p>Cargando...</p>
                                </div>
                            }
                            else
                            {
                                @if (entityType == "user")
                                {
                                    <EntitySelector EntityType="user"
                                                    Title="Seleccionar Usuario Origen"
                                                    Description="Usuario del cual se copiarán los permisos"
                                                    Users="users"
                                                    SelectedUser="sourceUser"
                                                    OnUserSelected="OnSourceUserSelected"
                                                    AllowClear="false"
                                                    ShowSelectedInfo="true" />
                                }
                                else if (entityType == "role" || entityType == "roleToUser")
                                {
                                    <EntitySelector EntityType="role"
                                                    Title="Seleccionar Rol Origen"
                                                    Description="Rol del cual se copiarán los permisos"
                                                    Roles="roles"
                                                    SelectedRole="sourceRole"
                                                    OnRoleSelected="OnSourceRoleSelected"
                                                    GetRoleUsersCount="GetUsersInRoleCount"
                                                    AllowClear="false"
                                                    ShowSelectedInfo="true" />
                                }
                            }
                        </div>
                    </div>

                    <!-- Flecha indicadora -->
                    <div class="arrow-indicator">
                        <i class="fas fa-arrow-right"></i>
                    </div>

                    <!-- Sección Destino -->
                    <div class="copy-section">
                        <h4><i class="fas fa-file-import"></i> Destino (Copiar A)</h4>
                        <div class="section-content">
                            @if (isLoading)
                            {
                                <div class="loading-container">
                                    <div class="simple-spinner"></div>
                                    <p>Cargando...</p>
                                </div>
                            }
                            else
                            {
                                @if (entityType == "user" || entityType == "roleToUser")
                                {
                                    <EntitySelector EntityType="user"
                                                    Title="Seleccionar Usuario Destino"
                                                    Description="Usuario al cual se copiarán los permisos"
                                                    Users="GetAvailableTargetUsers()"
                                                    SelectedUser="targetUser"
                                                    OnUserSelected="OnTargetUserSelected"
                                                    AllowClear="false"
                                                    ShowSelectedInfo="true" />
                                }
                                else if (entityType == "role")
                                {
                                    <EntitySelector EntityType="role"
                                                    Title="Seleccionar Rol Destino"
                                                    Description="Rol al cual se copiarán los permisos"
                                                    Roles="GetAvailableTargetRoles()"
                                                    SelectedRole="targetRole"
                                                    OnRoleSelected="OnTargetRoleSelected"
                                                    GetRoleUsersCount="GetUsersInRoleCount"
                                                    AllowClear="false"
                                                    ShowSelectedInfo="true" />
                                }
                            }
                        </div>
                    </div>
                </div>

                <!-- Opciones de copia -->
                @if ((sourceUser != null || sourceRole != null) && (targetUser != null || targetRole != null))
                {
                    <div class="copy-options">
                        <h4><i class="fas fa-cog"></i> Opciones de Copia</h4>
                        <div class="options-grid">
                            <div class="form-check">
                                <input type="checkbox" class="form-check-input" id="replaceExisting"
                                       @bind="replaceExisting" />
                                <label class="form-check-label" for="replaceExisting">
                                    <i class="fas fa-sync-alt"></i> Reemplazar permisos existentes
                                    <small>Los permisos actuales del destino serán eliminados</small>
                                </label>
                            </div>
                            <div class="form-check">
                                <input type="checkbox" class="form-check-input" id="mergePermissions"
                                       @bind="mergePermissions" disabled="@replaceExisting" />
                                <label class="form-check-label" for="mergePermissions">
                                    <i class="fas fa-plus-circle"></i> Combinar con permisos existentes
                                    <small>Solo se agregarán los permisos que no tiene</small>
                                </label>
                            </div>
                        </div>
                    </div>

                    <div class="preview-section">
                        <h4><i class="fas fa-eye"></i> Vista Previa</h4>
                        <div class="preview-content">
                            <p><strong>Se copiarán los permisos de:</strong></p>
                            <p class="source-info">
                                @if (entityType == "roleToUser" || entityType == "role")
                                {
                                    <i class="fas fa-user-tag"></i>
                                    <strong>Rol:</strong>
 
                                    @sourceRole?.RoleName
                                }
                                else
                                {
                                    <i class="fas fa-user"></i>
                                    <strong>Usuario:</strong>
 
                                    @sourceUser?.FirstName@sourceUser?.LastName
                                    @sourceUser?.Email
                                                }
                            </p>
                            <p><strong>Al destino:</strong></p>
                            <p class="target-info">
                                @if (entityType == "user" || entityType == "roleToUser")
                                {
                                    <i class="fas fa-user"></i>
                                    <strong>Usuario:</strong>
 
                                    @targetUser?.FirstName@targetUser?.LastName
                                    @targetUser?.Email
                                                        }
                                else
                                {
                                    <i class="fas fa-user-tag"></i>
                                    <strong>Rol:</strong>
 
                                    @targetRole?.RoleName
                                }
                            </p>
                        </div>
                    </div>
                }
            </div>

            <div class="modal-footer-modern">
                <button type="button" class="btn-modern btn-primary-modern"
                        @onclick="ExecuteCopy"
                        disabled="@(!CanExecuteCopy() || isCopying)">
                    @if (isCopying)
                    {
                        <span class="simple-spinner small"></span>
                        <text>Copiando...</text>
                    }
                    else
                    {
                        <i class="fas fa-copy"></i>
                        <text>Copiar Permisos</text>
                    }
                </button>
                <button type="button" class="btn-modern btn-secondary-modern" @onclick="CloseModal">
                    Cancelar
                </button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool showModal { get; set; } = false;
    [Parameter] public EventCallback OnModalClosed { get; set; }
    [Parameter] public EventCallback<string> OnSuccess { get; set; }
    [Parameter] public EventCallback<string> OnError { get; set; }

    private string entityType = "user";

    private List<UserDTO> users = new();
    private List<RoleDTO> roles = new();
    private Dictionary<string, int> roleUserCounts = new();

    private UserDTO? sourceUser;
    private UserDTO? targetUser;
    private RoleDTO? sourceRole;
    private RoleDTO? targetRole;

    private bool replaceExisting = false;
    private bool mergePermissions = true;
    private bool isLoading = false;
    private bool isCopying = false;

    protected override async Task OnParametersSetAsync()
    {
        if (showModal && !isLoading && (!users.Any() || !roles.Any()))
        {
            Console.WriteLine("🔄 Modal de copia abierto - Cargando datos...");
            await LoadData();
        }
    }

    private async Task LoadData()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            Console.WriteLine("📡 Cargando usuarios...");
            var paginationDTO = new PaginationDTO { Page = 1, RecordsPerPage = 100 };
            var response = await usersRepository.GetUsers(paginationDTO);
            users = response?.Response?.ToList() ?? new List<UserDTO>();
            Console.WriteLine($"✅ Usuarios cargados: {users.Count}");

            Console.WriteLine("📡 Cargando roles...");
            var rolesResponse = await usersRepository.GetRoles();
            roles = rolesResponse?.ToList() ?? new List<RoleDTO>();
            Console.WriteLine($"✅ Roles cargados: {roles.Count}");

            // Contar usuarios por rol
            roleUserCounts.Clear();
            foreach (var role in roles)
            {
                // CORREGIDO: Verificar que el rol tenga RoleId
                if (string.IsNullOrEmpty(role.RoleId) && !string.IsNullOrEmpty(role.RoleName))
                {
                    role.RoleId = role.RoleName; // Fallback si RoleId está vacío
                }
                roleUserCounts[role.RoleName] = 0; // En producción, obtener el conteo real
            }

            Console.WriteLine("✅ Datos cargados correctamente");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Error cargando datos: {ex.Message}");
            await OnError.InvokeAsync($"Error cargando datos: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void SetEntityType(string type)
    {
        Console.WriteLine($"🔄 Cambiando tipo de entidad: {type}");
        entityType = type;

        // Limpiar selecciones al cambiar tipo
        sourceUser = null;
        targetUser = null;
        sourceRole = null;
        targetRole = null;

        StateHasChanged();
    }

    private List<UserDTO> GetAvailableTargetUsers()
    {
        if (sourceUser != null)
        {
            var availableUsers = users.Where(u => u.UserId != sourceUser.UserId).ToList();
            Console.WriteLine($"📊 Usuarios destino disponibles: {availableUsers.Count}");
            return availableUsers;
        }
        Console.WriteLine($"📊 Todos los usuarios disponibles: {users.Count}");
        return users;
    }

    private List<RoleDTO> GetAvailableTargetRoles()
    {
        if (sourceRole != null)
        {
            var availableRoles = roles.Where(r => r.RoleId != sourceRole.RoleId && r.RoleName != sourceRole.RoleName).ToList();
            Console.WriteLine($"📊 Roles destino disponibles: {availableRoles.Count}");
            return availableRoles;
        }
        Console.WriteLine($"📊 Todos los roles disponibles: {roles.Count}");
        return roles;
    }

    private int GetUsersInRoleCount(RoleDTO role)
    {
        return roleUserCounts.GetValueOrDefault(role.RoleName, 0);
    }

    private void OnSourceUserSelected(UserDTO user)
    {
        Console.WriteLine($"👤 Usuario origen seleccionado: {user.FirstName} {user.LastName}");
        sourceUser = user;
        sourceRole = null; // Limpiar rol origen
        StateHasChanged();
    }

    private void OnTargetUserSelected(UserDTO user)
    {
        Console.WriteLine($"🎯 Usuario destino seleccionado: {user.FirstName} {user.LastName}");
        targetUser = user;
        targetRole = null; // Limpiar rol destino
        StateHasChanged();
    }

    private void OnSourceRoleSelected(RoleDTO role)
    {
        Console.WriteLine($"🏷️ Rol origen seleccionado: {role.RoleName}");
        sourceRole = role;
        sourceUser = null; // Limpiar usuario origen
        StateHasChanged();
    }

    private void OnTargetRoleSelected(RoleDTO role)
    {
        Console.WriteLine($"🎯 Rol destino seleccionado: {role.RoleName}");
        targetRole = role;
        targetUser = null; // Limpiar usuario destino
        StateHasChanged();
    }

    private bool CanExecuteCopy()
    {
        bool canExecute = false;

        if (entityType == "user")
        {
            canExecute = sourceUser != null && targetUser != null;
        }
        else if (entityType == "role")
        {
            canExecute = sourceRole != null && targetRole != null;
        }
        else if (entityType == "roleToUser")
        {
            canExecute = sourceRole != null && targetUser != null;
        }

        Console.WriteLine($"🔍 CanExecuteCopy: {canExecute} (entityType: {entityType})");
        return canExecute;
    }

    private async Task ExecuteCopy()
    {
        if (!CanExecuteCopy()) return;

        try
        {
            isCopying = true;
            StateHasChanged();

            Console.WriteLine($"🚀 Ejecutando copia - Tipo: {entityType}");

            HttpResponseMessage response;
            string successMessage = "";

            if (entityType == "user")
            {
                var copyDto = new
                {
                    EntityType = "User",
                    SourceId = sourceUser!.UserId,
                    TargetId = targetUser!.UserId,
                    ReplaceExisting = replaceExisting,
                    MergePermissions = mergePermissions
                };

                Console.WriteLine($"📤 Copiando de usuario {sourceUser.Email} a {targetUser.Email}");
                response = await httpClient.PostAsJsonAsync("/api/permissions/copy/user", copyDto);
                successMessage = $"Permisos copiados exitosamente de {sourceUser.FirstName} {sourceUser.LastName} a {targetUser!.FirstName} {targetUser.LastName}";
            }
            else if (entityType == "role")
            {
                var copyDto = new
                {
                    EntityType = "Role",
                    SourceId = sourceRole!.RoleId ?? sourceRole.RoleName,
                    TargetId = targetRole!.RoleId ?? targetRole.RoleName,
                    ReplaceExisting = replaceExisting,
                    MergePermissions = mergePermissions
                };

                Console.WriteLine($"📤 Copiando de rol {sourceRole.RoleName} a {targetRole.RoleName}");
                response = await httpClient.PostAsJsonAsync("/api/permissions/copy/role", copyDto);
                successMessage = $"Permisos copiados exitosamente del rol {sourceRole.RoleName} al rol {targetRole!.RoleName}";
            }
            else // roleToUser
            {
                var copyDto = new
                {
                    EntityType = "RoleToUser",
                    SourceId = sourceRole!.RoleId ?? sourceRole.RoleName,
                    TargetId = targetUser!.UserId,
                    ReplaceExisting = replaceExisting,
                    MergePermissions = mergePermissions
                };

                Console.WriteLine($"📤 Copiando de rol {sourceRole.RoleName} a usuario {targetUser.Email}");
                response = await httpClient.PostAsJsonAsync("/api/permissions/copy/role-to-user", copyDto);
                successMessage = $"Permisos copiados exitosamente del rol {sourceRole.RoleName} al usuario {targetUser!.FirstName} {targetUser.LastName}";
            }

            if (response!.IsSuccessStatusCode)
            {
                Console.WriteLine($"✅ Copia exitosa: {successMessage}");
                await OnSuccess.InvokeAsync(successMessage);
                await CloseModal();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"❌ Error en respuesta: {response.StatusCode} - {error}");
                throw new Exception($"Error del servidor ({response.StatusCode}): {error}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Error copiando: {ex.Message}");
            await OnError.InvokeAsync($"Error al copiar permisos: {ex.Message}");
        }
        finally
        {
            isCopying = false;
            StateHasChanged();
        }
    }

    private async Task CloseModal()
    {
        Console.WriteLine("🔒 Cerrando modal y limpiando estado");

        // Reset state
        entityType = "user";
        sourceUser = null;
        targetUser = null;
        sourceRole = null;
        targetRole = null;
        replaceExisting = false;
        mergePermissions = true;

        await OnModalClosed.InvokeAsync();
    }

    private async Task CloseModalBackground(MouseEventArgs e)
    {
        await CloseModal();
    }
}

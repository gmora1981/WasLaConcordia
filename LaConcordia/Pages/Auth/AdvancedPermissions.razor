@page "/admin/advanced-permissions"
@using Identity.Api.Interfaces
@using LaConcordia.Model
@using LaConcordia.Repository
@using Microsoft.AspNetCore.Components.Authorization
@inject IUsersRepository usersRepository
@inject INavigationRepository navigationRepository
@inject IPermissionService permissionService
@inject HttpClient httpClient
@inject IJSRuntime JSRuntime
@inject IDisplayMessage displayMessage
@attribute [Authorize(Roles = "Admin")]

<!-- Importar CSS -->
<link href="css/AdminCommon.css" rel="stylesheet" />
<link href="css/AdvancedPermissions.css" rel="stylesheet" />

<div class="page-container">
    <div class="content-card">
        <div class="header-section">
            <h1 class="page-title">
                <i class="fas fa-shield-alt"></i> Gestión Avanzada de Permisos
            </h1>
            <div style="display: flex; gap: 1rem;">
                <button class="btn-modern btn-primary-modern" @onclick="ShowPermissionMatrix">
                    <i class="fas fa-table"></i> Matriz de Permisos
                </button>
                <button class="btn-modern btn-secondary-modern" @onclick="ShowBulkAssignment">
                    <i class="fas fa-users-cog"></i> Asignación Masiva
                </button>
            </div>
        </div>



        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert-modern alert-danger">
                <i class="fas fa-exclamation-triangle"></i>
                @errorMessage
                <button type="button" style="background: transparent; border: none; color: inherit; margin-left: auto; cursor: pointer;" @onclick="() => errorMessage = null">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        }

        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="alert-modern alert-success">
                <i class="fas fa-check-circle"></i>
                @successMessage
                <button type="button" style="background: transparent; border: none; color: inherit; margin-left: auto; cursor: pointer;" @onclick="() => successMessage = null">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        }

        <!-- Pestañas -->
        <div class="tab-container">
            <div class="tab-headers">
                <button class="tab-header @(activeTab == "users" ? "active" : "")" @onclick="@(() => SetActiveTab("users"))">
                    <i class="fas fa-users"></i> Permisos por Usuario (@users.Count)
                </button>
                <button class="tab-header @(activeTab == "roles" ? "active" : "")" @onclick="@(() => SetActiveTab("roles"))">
                    <i class="fas fa-user-tag"></i> Permisos por Rol (@roles.Count)
                </button>
                <button class="tab-header @(activeTab == "navigation" ? "active" : "")" @onclick="@(() => SetActiveTab("navigation"))">
                    <i class="fas fa-sitemap"></i> Items de Navegación (@navigationItems.Count)
                </button>
                <button class="tab-header @(activeTab == "tools" ? "active" : "")" @onclick="@(() => SetActiveTab("tools"))">
                    <i class="fas fa-tools"></i> Herramientas
                </button>
            </div>

            <!-- Contenido de Pestañas -->
            <div class="tab-content" style="min-height: 400px; background: #f8f9fa; padding: 1rem; border-radius: 8px;">
                @* PESTAÑA USUARIOS - Mostrar siempre algo *@
                @if (activeTab == "users")
                {
                    <div class="tab-pane" style="background: white; padding: 1.5rem; border-radius: 8px; min-height: 300px;">
                        <h3>Gestión de Permisos por Usuario</h3>

                        <div class="filter-section">
                            <div class="search-box">
                                <i class="fas fa-search"></i>
                                <input type="text" placeholder="Buscar usuario..." @bind="userSearchTerm" @bind:event="oninput" @onkeyup="FilterUsers" />
                            </div>
                            <button class="btn-modern btn-primary-modern" @onclick="LoadUserPermissions">
                                <i class="fas fa-sync"></i> Actualizar
                            </button>
                        </div>



                        @if (isLoadingUsers)
                        {
                            <div class="loading-container">
                                <div class="loading-spinner"></div>
                                <p>Cargando usuarios...</p>
                            </div>
                        }
                        else
                        {
                            @* MOSTRAR CONTENIDO AUNQUE NO HAYA DATOS *@
                            @if (filteredUsers != null && filteredUsers.Any())
                            {
                                <div class="user-permissions-grid">
                                    @foreach (var user in filteredUsers.Take(20))
                                    {
                                        <div class="user-permission-card">
                                            <div class="user-info">
                                                <div class="user-avatar">
                                                    @((!string.IsNullOrEmpty(user.FirstName) ? user.FirstName.Substring(0, 1).ToUpper() : "?"))
                                                </div>
                                                <div class="user-details">
                                                    <h4>@user.FirstName @user.LastName</h4>
                                                    <p>@user.Email</p>
                                                    @if (userRoles.ContainsKey(user.UserId))
                                                    {
                                                        <div class="user-roles">
                                                            @foreach (var role in userRoles[user.UserId])
                                                            {
                                                                <span class="role-badge">@role</span>
                                                            }
                                                        </div>
                                                    }
                                                </div>
                                            </div>
                                            <div class="permission-actions">
                                                <button class="btn-icon btn-edit" @onclick="() => ManageUserPermissions(user)" title="Gestionar Permisos">
                                                    <i class="fas fa-key"></i>
                                                </button>
                                                <button class="btn-icon btn-roles" @onclick="() => ViewUserPermissions(user)" title="Ver Permisos">
                                                    <i class="fas fa-eye"></i>
                                                </button>
                                                <button class="btn-icon btn-secondary" @onclick="() => OpenCopyModal(user)" title="Copiar Permisos - FUNCIONAL">
                                                    <i class="fas fa-copy"></i>
                                                </button>
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                            else
                            {
                                <div class="empty-state">
                                    <i class="fas fa-users-slash"></i>
                                    <p>No se encontraron usuarios</p>
                                </div>
                            }
                        }
                    </div>
                }
                @* PESTAÑA ROLES *@
                else if (activeTab == "roles")
                {
                    <div class="tab-pane" style="background: white; padding: 1.5rem; border-radius: 8px; min-height: 300px;">
                        <h3>Gestión de Permisos por Rol</h3>



                        @if (isLoadingRoles)
                        {
                            <div class="loading-container">
                                <div class="loading-spinner"></div>
                                <p>Cargando roles...</p>
                            </div>
                        }
                        else
                        {
                            @if (roles != null && roles.Any())
                            {
                                <div class="roles-grid">
                                    @foreach (var role in roles)
                                    {
                                        <div class="role-card">
                                            <div class="role-header">
                                                <h4>
                                                    <i class="fas @(role.RoleName == "Admin" ? "fa-crown" : "fa-user")"></i>
                                                    @role.RoleName
                                                </h4>
                                                <div class="role-actions">
                                                    <button class="btn-icon btn-edit" @onclick="() => ManageRolePermissions(role)" title="Gestionar Permisos">
                                                        <i class="fas fa-cog"></i>
                                                    </button>
                                                    <button class="btn-icon btn-roles" @onclick="() => ViewRolePermissions(role)" title="Ver Permisos">
                                                        <i class="fas fa-list"></i>
                                                    </button>
                                                </div>
                                            </div>
                                            <div class="role-stats">
                                                <p>Usuarios en este rol: <strong>@GetUsersInRoleCount(role.RoleName)</strong></p>
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                            else
                            {
                                <div class="empty-state">
                                    <i class="fas fa-user-tag"></i>
                                    <p>No se encontraron roles</p>
                                </div>
                            }
                        }
                    </div>
                }
                @* PESTAÑA NAVEGACIÓN *@
                else if (activeTab == "navigation")
                {
                    <div class="tab-pane" style="background: white; padding: 1.5rem; border-radius: 8px; min-height: 300px;">
                        <h3>Items de Navegación</h3>
                        <p style="margin-bottom: 1.5rem; color: #7f8c8d;">
                            Gestiona los elementos del menú de navegación y sus permisos asociados.
                        </p>



                        @if (isLoadingNavigation)
                        {
                            <div class="loading-container">
                                <div class="loading-spinner"></div>
                                <p>Cargando navegación...</p>
                            </div>
                        }
                        else
                        {
                            @if (navigationItems != null && navigationItems.Any())
                            {
                                <div class="navigation-tree">
                                    @foreach (var item in navigationItems.Where(i => i.ParentId == null).OrderBy(i => i.Order))
                                    {
                                        <div class="nav-tree-item">
                                            <div class="nav-item-header">
                                                @if (!string.IsNullOrEmpty(item.Icon))
                                                {
                                                    <i class="@item.Icon"></i>
                                                }
                                                <span class="nav-title">@item.Title</span>
                                                @if (!string.IsNullOrEmpty(item.RequiredRole))
                                                {
                                                    <span class="permission-badge">@item.RequiredRole</span>
                                                }
                                                <button class="btn-icon btn-edit" @onclick="() => ManageNavigationPermissions(item)" title="Gestionar Permisos">
                                                    <i class="fas fa-key"></i>
                                                </button>
                                            </div>

                                            @if (item.Children != null && item.Children.Any())
                                            {
                                                <div class="nav-children">
                                                    @foreach (var child in item.Children.OrderBy(c => c.Order))
                                                    {
                                                        <div class="nav-child-item">
                                                            @if (!string.IsNullOrEmpty(child.Icon))
                                                            {
                                                                <i class="@child.Icon"></i>
                                                            }
                                                            <span>@child.Title</span>
                                                            @if (!string.IsNullOrEmpty(child.RequiredRole))
                                                            {
                                                                <span class="permission-badge">@child.RequiredRole</span>
                                                            }
                                                            <button class="btn-icon btn-edit" @onclick="() => ManageNavigationPermissions(child)" title="Gestionar Permisos">
                                                                <i class="fas fa-key"></i>
                                                            </button>
                                                        </div>
                                                    }
                                                </div>
                                            }
                                        </div>
                                    }
                                </div>
                            }
                            else
                            {
                                <div class="empty-state">
                                    <i class="fas fa-sitemap"></i>
                                    <p>No hay elementos de navegación configurados</p>
                                    <a href="/admin/navigation" class="btn-modern btn-primary-modern">
                                        <i class="fas fa-plus"></i> Crear Elementos
                                    </a>
                                </div>
                            }
                        }
                    </div>
                }
                @* PESTAÑA HERRAMIENTAS *@
                else if (activeTab == "tools")
                {
                    <div class="tab-pane" style="background: white; padding: 1.5rem; border-radius: 8px; min-height: 300px;">
                        <h3>Herramientas de Gestión</h3>

                        <div class="tools-grid">
                            <div class="tool-card">
                                <div class="tool-icon">
                                    <i class="fas fa-copy"></i>
                                </div>
                                <h4>Copiar Permisos</h4>
                                <p>Copia permisos entre usuarios o roles</p>
                                <button class="btn-modern btn-primary-modern" @onclick="ShowCopyPermissions">
                                    Usar Herramienta
                                </button>
                            </div>

                            <div class="tool-card">
                                <div class="tool-icon">
                                    <i class="fas fa-broom"></i>
                                </div>
                                <h4>Limpiar Permisos</h4>
                                <p>Resetea todos los permisos de un usuario o rol</p>
                                <button class="btn-modern btn-secondary-modern" @onclick="ShowResetPermissions">
                                    Usar Herramienta
                                </button>
                            </div>

                            <div class="tool-card">
                                <div class="tool-icon">
                                    <i class="fas fa-chart-bar"></i>
                                </div>
                                <h4>Reporte de Permisos</h4>
                                <p>Genera reportes detallados de permisos</p>
                                <button class="btn-modern btn-info" @onclick="GeneratePermissionsReport">
                                    Generar Reporte
                                </button>
                            </div>

                            <div class="tool-card">
                                <div class="tool-icon">
                                    <i class="fas fa-history"></i>
                                </div>
                                <h4>Auditoría</h4>
                                <p>Revisa el historial de cambios de permisos</p>
                                <button class="btn-modern btn-warning" @onclick="ShowAuditLog">
                                    Ver Auditoría
                                </button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- Modal de gestión de permisos de usuario -->
@if (showPermissionModal && selectedUserForPermissions != null)
{
    <UserPermissionModal showModal="showPermissionModal"
                         selectedUser="selectedUserForPermissions"
                         OnModalClosed="OnPermissionModalClosed" />
}

<!-- Modal de copia de permisos -->
@if (showCopyModal && selectedUserForCopy != null)
{
    <CopyPermissionsModal showModal="showCopyModal"
                          sourceUser="selectedUserForCopy"
                          allUsers="users"
                          OnModalClosed="OnCopyModalClosed"
                          OnSuccess="OnCopySuccess"
                          OnError="OnCopyError" />
}

<!-- Modal de matriz de permisos -->
<PermissionMatrixModal @bind-showModal="showMatrixModal" />

<!-- Modal de asignación masiva global -->
<GlobalBulkAssignmentModal @bind-showModal="showBulkModal" />

@code {
    private string activeTab = "users";
    private string? errorMessage;
    private string? successMessage;
    private bool isInitialized = false;

    // Loading states - CAMBIO: Inicializar en false
    private bool isLoadingUsers = false;
    private bool isLoadingRoles = false;
    private bool isLoadingNavigation = false;

    // Data collections - IMPORTANTE: Inicializar las listas
    private List<UserDTO> users = new List<UserDTO>();
    private List<UserDTO> filteredUsers = new List<UserDTO>();
    private List<RoleDTO> roles = new List<RoleDTO>();
    private List<NavigationItemDto> navigationItems = new List<NavigationItemDto>();
    private Dictionary<string, List<string>> userRoles = new Dictionary<string, List<string>>();
    private Dictionary<string, int> roleUserCounts = new Dictionary<string, int>();

    // Search and filters
    private string userSearchTerm = "";

    // Modal state
    private bool showPermissionModal = false;
    private bool showMatrixModal = false;
    private bool showBulkModal = false;
    private bool showCopyModal = false;
    private UserDTO? selectedUserForPermissions;
    private UserDTO? selectedUserForCopy;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("🔥 OnInitializedAsync - INICIANDO");

        try
        {
            // FORZAR actualización inmediata de UI
            StateHasChanged();

            await LoadAllData();
            isInitialized = true;
            Console.WriteLine("✅ OnInitializedAsync - COMPLETADO");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ OnInitializedAsync - ERROR: {ex.Message}");
            errorMessage = $"Error al inicializar: {ex.Message}";
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async Task LoadAllData()
    {
        Console.WriteLine("🔄 LoadAllData - INICIANDO");

        // Ejecutar cargas en paralelo pero con mejor manejo de errores
        await LoadUsers();
        await LoadRoles();
        await LoadNavigationItems();

        Console.WriteLine("✅ LoadAllData - COMPLETADO");
    }

    private async Task LoadUsers()
    {
        Console.WriteLine("👤 LoadUsers - INICIANDO");

        try
        {
            isLoadingUsers = true;
            StateHasChanged();

            var paginationDTO = new PaginationDTO { Page = 1, RecordsPerPage = 100 };
            var response = await usersRepository.GetUsers(paginationDTO);

            // VALIDACIÓN IMPORTANTE
            if (response?.Response != null)
            {
                users = response.Response.ToList();
                Console.WriteLine($"👤 LoadUsers - Usuarios obtenidos: {users.Count}");
            }
            else
            {
                users = new List<UserDTO>();
                Console.WriteLine("⚠️ LoadUsers - Response nulo o vacío");
            }

            // Cargar roles de usuarios
            userRoles.Clear();
            foreach (var user in users)
            {
                try
                {
                    var userRolesList = await usersRepository.GetUserRoles(user.UserId);
                    userRoles[user.UserId] = userRolesList ?? new List<string>();
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"⚠️ Error cargando roles para usuario {user.UserId}: {ex.Message}");
                    userRoles[user.UserId] = new List<string>();
                }
            }

            FilterUsers();
            Console.WriteLine($"✅ LoadUsers - COMPLETADO. Usuarios filtrados: {filteredUsers.Count}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ LoadUsers - ERROR: {ex.Message}");
            users = new List<UserDTO>();
            filteredUsers = new List<UserDTO>();
            // NO establecer errorMessage aquí para no sobrescribir otros errores
        }
        finally
        {
            isLoadingUsers = false;
            StateHasChanged();
        }
    }

    private async Task LoadRoles()
    {
        Console.WriteLine("🏷️ LoadRoles - INICIANDO");

        try
        {
            isLoadingRoles = true;
            StateHasChanged();

            var rolesResponse = await usersRepository.GetRoles();
            roles = rolesResponse?.ToList() ?? new List<RoleDTO>();
            Console.WriteLine($"🏷️ LoadRoles - Roles obtenidos: {roles.Count}");

            // Cargar conteo de usuarios por rol
            roleUserCounts.Clear();
            foreach (var role in roles)
            {
                roleUserCounts[role.RoleName] = users.Count(u =>
                    userRoles.ContainsKey(u.UserId) &&
                    userRoles[u.UserId].Contains(role.RoleName));
            }

            Console.WriteLine("✅ LoadRoles - COMPLETADO");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ LoadRoles - ERROR: {ex.Message}");
            roles = new List<RoleDTO>();
        }
        finally
        {
            isLoadingRoles = false;
            StateHasChanged();
        }
    }

    private async Task LoadNavigationItems()
    {
        Console.WriteLine("🧭 LoadNavigationItems - INICIANDO");

        try
        {
            isLoadingNavigation = true;
            StateHasChanged();

            var items = await navigationRepository.GetAllAsync();
            var itemsList = items?.ToList() ?? new List<NavigationItemDto>();

            Console.WriteLine($"🧭 LoadNavigationItems - Items obtenidos: {itemsList.Count}");

            // Construir estructura jerárquica con validación
            if (itemsList.Any())
            {
                var lookup = itemsList.ToLookup(i => i.ParentId);
                navigationItems = itemsList.Where(i => i.ParentId == null)
                    .Select(item => new NavigationItemDto
                    {
                        Id = item.Id,
                        ParentId = item.ParentId,
                        Title = item.Title ?? "",
                        Url = item.Url,
                        Icon = item.Icon,
                        Order = item.Order,
                        IsActive = item.IsActive,
                        RequiredRole = item.RequiredRole,
                        Children = lookup[item.Id].Select(child => new NavigationItemDto
                        {
                            Id = child.Id,
                            ParentId = child.ParentId,
                            Title = child.Title ?? "",
                            Url = child.Url,
                            Icon = child.Icon,
                            Order = child.Order,
                            IsActive = child.IsActive,
                            RequiredRole = child.RequiredRole,
                            Children = new List<NavigationItemDto>()
                        }).ToList()
                    }).ToList();
            }
            else
            {
                navigationItems = new List<NavigationItemDto>();
            }

            Console.WriteLine($"✅ LoadNavigationItems - COMPLETADO. Items jerárquicos: {navigationItems.Count}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ LoadNavigationItems - ERROR: {ex.Message}");
            navigationItems = new List<NavigationItemDto>();
        }
        finally
        {
            isLoadingNavigation = false;
            StateHasChanged();
        }
    }

    private void FilterUsers()
    {
        if (string.IsNullOrWhiteSpace(userSearchTerm))
        {
            filteredUsers = new List<UserDTO>(users);
        }
        else
        {
            var searchLower = userSearchTerm.ToLower();
            filteredUsers = users.Where(u =>
                (u.Email?.ToLower().Contains(searchLower) == true) ||
                (u.FirstName?.ToLower().Contains(searchLower) == true) ||
                (u.LastName?.ToLower().Contains(searchLower) == true)
            ).ToList();
        }
        StateHasChanged();
    }

    private void SetActiveTab(string tab)
    {
        Console.WriteLine($"🔄 Cambiando a tab: {tab}");
        activeTab = tab;

        // IMPORTANTE: Cerrar modales al cambiar de pestaña para evitar problemas de estado
        if (showPermissionModal)
        {
            Console.WriteLine("🔒 Cerrando modal de permisos al cambiar de pestaña");
            showPermissionModal = false;
            selectedUserForPermissions = null;
        }

        if (showMatrixModal)
        {
            showMatrixModal = false;
        }

        if (showBulkModal)
        {
            showBulkModal = false;
        }

        if (showCopyModal)
        {
            showCopyModal = false;
            selectedUserForCopy = null;
        }

        StateHasChanged();
    }

    // Métodos para manejar el modal de copia
    private void OnCopyModalClosed()
    {
        Console.WriteLine("🔒 Modal de copia cerrado");
        showCopyModal = false;
        selectedUserForCopy = null;
        StateHasChanged();
    }

    private void OnCopySuccess(string message)
    {
        Console.WriteLine($"✅ Copia exitosa: {message}");
        successMessage = message;

        // Limpiar mensaje después de 5 segundos
        _ = Task.Delay(5000).ContinueWith(_ =>
        {
            successMessage = null;
            InvokeAsync(StateHasChanged);
        });

        StateHasChanged();
    }

    private void OnCopyError(string message)
    {
        Console.WriteLine($"❌ Error en copia: {message}");
        errorMessage = message;

        // Limpiar mensaje después de 10 segundos
        _ = Task.Delay(10000).ContinueWith(_ =>
        {
            errorMessage = null;
            InvokeAsync(StateHasChanged);
        });

        StateHasChanged();
    }

    // AGREGADO: Método para manejar el cierre del modal
    private void OnPermissionModalClosed()
    {
        Console.WriteLine("🔒 Modal de permisos cerrado");
        showPermissionModal = false;
        selectedUserForPermissions = null;
        StateHasChanged();
    }

    // AGREGADO: Método alternativo para cerrar modal desde código
    private void ClosePermissionModal()
    {
        showPermissionModal = false;
        selectedUserForPermissions = null;
        StateHasChanged();
    }

    private async Task LoadUserPermissions()
    {
        await LoadUsers();
        successMessage = "Lista de usuarios actualizada";
        StateHasChanged();
    }

    private int GetUsersInRoleCount(string roleName)
    {
        return roleUserCounts.GetValueOrDefault(roleName, 0);
    }

    // Resto de métodos sin cambios...
    private async Task ManageUserPermissions(UserDTO user)
    {
        selectedUserForPermissions = user;
        showPermissionModal = true;
        StateHasChanged();
    }

    // MÉTODO NUEVO CON NOMBRE DIFERENTE PARA EVITAR CONFLICTOS
    private void OpenCopyModal(UserDTO user)
    {
        Console.WriteLine($"🆕 MÉTODO NUEVO EJECUTADO - Abriendo modal para {user.FirstName} {user.LastName}");

        selectedUserForCopy = user;
        showCopyModal = true;
        StateHasChanged();

        Console.WriteLine($"✅ Modal configurado correctamente");
    }

    private async Task ViewUserPermissions(UserDTO user)
    {
        try
        {
            var permissions = await permissionService.GetUserPermissionsAsync(user.UserId);
            var permissionSummary = permissions.Permissions
                .Where(p => p.CanView || p.CanCreate || p.CanEdit || p.CanDelete)
                .Select(p => $"• {p.NavigationItemTitle}: {GetPermissionSummary(p)}")
                .Take(5)
                .ToList();

            var message = permissionSummary.Any()
                ? $"Permisos de {user.FirstName} {user.LastName}:\n\n{string.Join("\n", permissionSummary)}"
                : $"{user.FirstName} {user.LastName} no tiene permisos específicos asignados.";

            await JSRuntime.InvokeVoidAsync("alert", message);
        }
        catch (Exception ex)
        {
            await displayMessage.DisplayErrorMessage($"Error al obtener permisos: {ex.Message}");
        }
    }

    private string GetPermissionSummary(NavigationPermissionDto permission)
    {
        var perms = new List<string>();
        if (permission.CanView) perms.Add("Ver");
        if (permission.CanCreate) perms.Add("Crear");
        if (permission.CanEdit) perms.Add("Editar");
        if (permission.CanDelete) perms.Add("Eliminar");
        return perms.Any() ? string.Join(", ", perms) : "Sin permisos";
    }

    private async Task CopyUserPermissions(UserDTO user)
    {
        await JSRuntime.InvokeVoidAsync("alert", $"Función de copia de permisos para {user.Email} estará disponible próximamente");
    }

    private async Task ManageRolePermissions(RoleDTO role)
    {
        await JSRuntime.InvokeVoidAsync("alert",
            $"Gestión de permisos del rol {role.RoleName} estará disponible próximamente.\n\nEsta función permitirá:\n• Asignar permisos específicos al rol\n• Modificar permisos existentes\n• Ver usuarios afectados");
    }

    private async Task ViewRolePermissions(RoleDTO role)
    {
        try
        {
            isLoadingRoles = true;
            StateHasChanged();

            // ARREGLAR: Usar RoleId en lugar de Id
            var roleId = !string.IsNullOrEmpty(role.RoleId) ? role.RoleId : role.RoleId;
            var permissions = await permissionService.GetRolePermissionsAsync(roleId);

            if (permissions?.Permissions != null && permissions.Permissions.Any())
            {
                var permissionSummary = permissions.Permissions
                    .Where(p => p.CanView || p.CanCreate || p.CanEdit || p.CanDelete)
                    .Select(p => $"• {p.NavigationItemTitle}: {GetPermissionSummary(p)}")
                    .Take(10)
                    .ToList();

                var usersCount = GetUsersInRoleCount(role.RoleName);
                var message = $"Permisos del rol {role.RoleName} ({usersCount} usuarios):\n\n";

                if (permissionSummary.Any())
                {
                    message += string.Join("\n", permissionSummary);
                }
                else
                {
                    message += "No tiene permisos específicos asignados.";
                }

                await JSRuntime.InvokeVoidAsync("alert", message);
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert",
                    $"El rol {role.RoleName} no tiene permisos específicos asignados.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Error al obtener permisos del rol: {ex.Message}");
            await displayMessage.DisplayErrorMessage($"Error al obtener permisos del rol: {ex.Message}");
        }
        finally
        {
            isLoadingRoles = false;
            StateHasChanged();
        }
    }

    private async Task ManageNavigationPermissions(NavigationItemDto item)
    {
        await JSRuntime.InvokeVoidAsync("alert", $"Gestionar permisos para {item.Title} estará disponible próximamente");
    }

    private async Task ShowPermissionMatrix()
    {
        showMatrixModal = true;
        StateHasChanged();
    }

    private async Task ShowBulkAssignment()
    {
        showBulkModal = true;
        StateHasChanged();
    }

    private async Task ShowCopyPermissions()
    {
        // Si hay usuarios disponibles, mostrar el modal con el primer usuario como ejemplo
        if (users.Any())
        {
            selectedUserForCopy = null; // Sin usuario origen específico para selección manual
            showCopyModal = true;
            StateHasChanged();
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "No hay usuarios disponibles para copiar permisos");
        }
    }

    private async Task CopyUserToUserPermissions()
    {
        if (!users.Any())
        {
            await JSRuntime.InvokeVoidAsync("alert", "No hay usuarios disponibles");
            return;
        }

        var userOptions = string.Join("\n", users.Select((u, index) =>
            $"{index + 1}. {u.FirstName} {u.LastName} ({u.Email})"));

        var sourceSelection = await JSRuntime.InvokeAsync<string>("prompt",
            $"Seleccione el usuario ORIGEN (copiar DE):\n\n{userOptions}\n\nIngrese el número:");

        if (!int.TryParse(sourceSelection, out int sourceIndex) ||
            sourceIndex < 1 || sourceIndex > users.Count) return;

        var sourceUser = users[sourceIndex - 1];
        var targetUsers = users.Where(u => u.UserId != sourceUser.UserId).ToList();

        if (!targetUsers.Any())
        {
            await JSRuntime.InvokeVoidAsync("alert", "No hay usuarios destino disponibles");
            return;
        }

        var targetOptions = string.Join("\n", targetUsers.Select((u, index) =>
            $"{index + 1}. {u.FirstName} {u.LastName} ({u.Email})"));

        var targetSelection = await JSRuntime.InvokeAsync<string>("prompt",
            $"Seleccione el usuario DESTINO (copiar A):\n\n{targetOptions}\n\nIngrese el número:");

        if (!int.TryParse(targetSelection, out int targetIndex) ||
            targetIndex < 1 || targetIndex > targetUsers.Count) return;

        var targetUser = targetUsers[targetIndex - 1];

        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm",
            $"¿Copiar permisos de {sourceUser.FirstName} {sourceUser.LastName} a {targetUser.FirstName} {targetUser.LastName}?");

        if (!confirmed) return;

        var copyDto = new
        {
            EntityType = "User",
            SourceId = sourceUser.UserId,
            TargetId = targetUser.UserId
        };

        var response = await httpClient.PostAsJsonAsync("/api/permissions/copy/user", copyDto);

        if (response.IsSuccessStatusCode)
        {
            successMessage = "Permisos copiados exitosamente";
            await JSRuntime.InvokeVoidAsync("alert", successMessage);
        }
        else
        {
            throw new Exception("Error al copiar permisos");
        }
    }

    private async Task CopyRoleToRolePermissions()
    {
        if (!roles.Any())
        {
            await JSRuntime.InvokeVoidAsync("alert", "No hay roles disponibles");
            return;
        }

        var roleOptions = string.Join("\n", roles.Select((r, index) =>
            $"{index + 1}. {r.RoleName}"));

        var sourceSelection = await JSRuntime.InvokeAsync<string>("prompt",
            $"Seleccione el rol ORIGEN (copiar DE):\n\n{roleOptions}\n\nIngrese el número:");

        if (!int.TryParse(sourceSelection, out int sourceIndex) ||
            sourceIndex < 1 || sourceIndex > roles.Count) return;

        var sourceRole = roles[sourceIndex - 1];
        var targetRoles = roles.Where(r => r.RoleName != sourceRole.RoleName).ToList();

        if (!targetRoles.Any())
        {
            await JSRuntime.InvokeVoidAsync("alert", "No hay roles destino disponibles");
            return;
        }

        var targetOptions = string.Join("\n", targetRoles.Select((r, index) =>
            $"{index + 1}. {r.RoleName}"));

        var targetSelection = await JSRuntime.InvokeAsync<string>("prompt",
            $"Seleccione el rol DESTINO (copiar A):\n\n{targetOptions}\n\nIngrese el número:");

        if (!int.TryParse(targetSelection, out int targetIndex) ||
            targetIndex < 1 || targetIndex > targetRoles.Count) return;

        var targetRole = targetRoles[targetIndex - 1];

        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm",
            $"¿Copiar permisos del rol {sourceRole.RoleName} al rol {targetRole.RoleName}?");

        if (!confirmed) return;

        // ARREGLAR: Usar RoleId en lugar de Id
        var sourceRoleId = !string.IsNullOrEmpty(sourceRole.RoleId) ? sourceRole.RoleId : sourceRole.RoleId;
        var targetRoleId = !string.IsNullOrEmpty(targetRole.RoleId) ? targetRole.RoleId : targetRole.RoleId;

        var copyDto = new
        {
            EntityType = "Role",
            SourceId = sourceRoleId,
            TargetId = targetRoleId
        };

        var response = await httpClient.PostAsJsonAsync("/api/permissions/copy/role", copyDto);

        if (response.IsSuccessStatusCode)
        {
            successMessage = "Permisos de rol copiados exitosamente";
            await JSRuntime.InvokeVoidAsync("alert", successMessage);
        }
        else
        {
            throw new Exception("Error al copiar permisos del rol");
        }
    }

    private async Task ShowResetPermissions()
    {
        try
        {
            var resetType = await JSRuntime.InvokeAsync<string>("prompt",
                "¿Qué tipo de permisos desea resetear?\n\n1. Usuario específico\n2. Rol específico\n\nIngrese 1 o 2:");

            if (resetType == "1")
            {
                await ResetUserPermissions();
            }
            else if (resetType == "2")
            {
                await ResetRolePermissions();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Error al resetear permisos: {ex.Message}");
            await displayMessage.DisplayErrorMessage($"Error al resetear permisos: {ex.Message}");
        }
    }

    private async Task ResetUserPermissions()
    {
        if (!users.Any())
        {
            await JSRuntime.InvokeVoidAsync("alert", "No hay usuarios disponibles");
            return;
        }

        var userOptions = string.Join("\n", users.Select((u, index) =>
            $"{index + 1}. {u.FirstName} {u.LastName} ({u.Email})"));

        var selection = await JSRuntime.InvokeAsync<string>("prompt",
            $"Seleccione el usuario para resetear TODOS sus permisos:\n\n{userOptions}\n\nIngrese el número:");

        if (!int.TryParse(selection, out int selectedIndex) ||
            selectedIndex < 1 || selectedIndex > users.Count) return;

        var selectedUser = users[selectedIndex - 1];

        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm",
            $"⚠️ ADVERTENCIA ⚠️\n\n¿Está COMPLETAMENTE SEGURO de eliminar TODOS los permisos de {selectedUser.FirstName} {selectedUser.LastName}?\n\nEsta acción NO se puede deshacer.");

        if (!confirmed) return;

        var response = await httpClient.DeleteAsync($"/api/permissions/reset/user/{selectedUser.UserId}");

        if (response.IsSuccessStatusCode)
        {
            successMessage = $"Permisos reseteados para {selectedUser.FirstName} {selectedUser.LastName}";
            await JSRuntime.InvokeVoidAsync("alert", successMessage);
        }
        else
        {
            throw new Exception("Error al resetear permisos del usuario");
        }
    }

    private async Task ResetRolePermissions()
    {
        if (!roles.Any())
        {
            await JSRuntime.InvokeVoidAsync("alert", "No hay roles disponibles");
            return;
        }

        var roleOptions = string.Join("\n", roles.Select((r, index) =>
            $"{index + 1}. {r.RoleName}"));

        var selection = await JSRuntime.InvokeAsync<string>("prompt",
            $"Seleccione el rol para resetear TODOS sus permisos:\n\n{roleOptions}\n\nIngrese el número:");

        if (!int.TryParse(selection, out int selectedIndex) ||
            selectedIndex < 1 || selectedIndex > roles.Count) return;

        var selectedRole = roles[selectedIndex - 1];

        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm",
            $"⚠️ ADVERTENCIA ⚠️\n\n¿Está COMPLETAMENTE SEGURO de eliminar TODOS los permisos del rol {selectedRole.RoleName}?\n\nEsto afectará a {GetUsersInRoleCount(selectedRole.RoleName)} usuarios.\n\nEsta acción NO se puede deshacer.");

        if (!confirmed) return;

        // ARREGLAR: Usar RoleId en lugar de Id
        var roleId = !string.IsNullOrEmpty(selectedRole.RoleId) ? selectedRole.RoleId : selectedRole.RoleId;
        var response = await httpClient.DeleteAsync($"/api/permissions/reset/role/{roleId}");

        if (response.IsSuccessStatusCode)
        {
            successMessage = $"Permisos reseteados para el rol {selectedRole.RoleName}";
            await JSRuntime.InvokeVoidAsync("alert", successMessage);
        }
        else
        {
            throw new Exception("Error al resetear permisos del rol");
        }
    }

    private async Task GeneratePermissionsReport()
    {
        try
        {
            var report = await permissionService.GetAllUsersWithPermissionsAsync();
            await JSRuntime.InvokeVoidAsync("alert", $"Reporte generado: {report.Count} usuarios con permisos");
        }
        catch (Exception ex)
        {
            await displayMessage.DisplayErrorMessage($"Error al generar reporte: {ex.Message}");
        }
    }

    private async Task ShowAuditLog()
    {
        try
        {
            var endDate = DateTime.UtcNow;
            var startDate = endDate.AddDays(-30);
            var audit = await permissionService.GetPermissionAuditAsync(startDate, endDate);

            var totalChanges = audit.UserPermissionChanges.Count + audit.RolePermissionChanges.Count;
            await JSRuntime.InvokeVoidAsync("alert", $"Auditoría (últimos 30 días): {totalChanges} cambios de permisos");
        }
        catch (Exception ex)
        {
            await displayMessage.DisplayErrorMessage($"Error al obtener auditoría: {ex.Message}");
        }
    }
}
@using LaConcordia.DTO
@using LaConcordia.Interface
@inject IFichaobservacione fichaobservacioneRepo

@if (IsVisible)
{
    <div class="modal d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);" @onclick="CerrarModal">
        <div class="modal-dialog modal-lg" @onclick:stopPropagation="true" style="max-width: 900px;">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Observaciones de la cédula: @Cedula</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="CerrarModal"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <!-- Izquierda: tabla observaciones -->
                        <div class="col-md-7" style="max-height: 400px; overflow-y: auto;">
                            @if (observaciones != null && observaciones.Count > 0)
                            {
                                <table class="table table-sm table-striped">
                                    <thead>
                                        <tr>
                                            <th>Fecha</th>
                                            <th>Observación</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var obs in observaciones)
                                        {
                                            <tr style="cursor:pointer" @onclick="() => SeleccionarObservacion(obs)">
                                                <td>@obs.Fecha?.ToShortDateString()</td>
                                                <td>@obs.Motivo</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>

                                <Pagination TotalItems="@totalObservaciones"
                                            PageSize="@pageSizeObservaciones"
                                            CurrentPage="@paginaObservaciones"
                                            OnPageChanged="CambiarPagina" />
                            }
                            else
                            {
                                <p>No hay observaciones para esta cédula.</p>
                            }
                        </div>

                        <!-- Derecha: formulario -->
                        <div class="col-md-5 border-start ps-3">
                            <h6>@(observacionSeleccionada == null ? "Nueva Observación" : "Editar Observación")</h6>
                            <EditForm Model="formObservacion" OnValidSubmit="GuardarOActualizarObservacion">
                                <DataAnnotationsValidator />
                                <ValidationSummary />

                                <div class="mb-3">
                                    <label class="form-label">Fecha</label>
                                    <InputDate class="form-control" @bind-Value="formObservacion.Fecha" Disabled="true" />
                                </div>

                                <div class="mb-3">
                                    <label class="form-label">Cédula</label>
                                    <InputText class="form-control" @bind-Value="formObservacion.Fkcedula" readonly />
                                </div>

                                <div class="mb-3">
                                    <label class="form-label">Unidad</label>
                                    <InputText class="form-control" @bind-Value="formObservacion.Fkunidad" readonly />
                                </div>

                                <div class="mb-3">
                                    <label class="form-label">Motivo</label>
                                    <InputTextArea class="form-control" rows="5" @bind-Value="formObservacion.Motivo" />
                                </div>

                                <button type="submit" class="btn btn-primary" disabled="@(!PuedeGuardar || guardando)">
                                    @if (guardando)
                                    {
                                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"> Guardando...</span>
                                    }
                                    else
                                    {
                                        <span>@(observacionSeleccionada == null ? "Guardar" : "Actualizar")</span>
                                    }
                                </button>

                                @if (observacionSeleccionada != null)
                                {
                                    <button type="button" class="btn btn-secondary ms-2" @onclick="CancelarEdicion">Cancelar</button>
                                    <button type="button" class="btn btn-danger ms-2" @onclick="ConfirmarEliminar">Eliminar</button>
                                }
                            </EditForm>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CerrarModal">Cerrar</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public string Cedula { get; set; } = "";
    [Parameter] public EventCallback OnClose { get; set; }
    [Inject] private IJSRuntime JSRuntime { get; set; } = default!;


    private bool IsVisible { get; set; } = false;
    private List<FichaobservacioneDTO> observaciones = new();
    private int paginaObservaciones = 1;
    private int pageSizeObservaciones = 5;
    private int totalObservaciones = 0;

    private bool guardando = false;
    private FichaobservacioneDTO formObservacion = new();
    private FichaobservacioneDTO? observacionSeleccionada;

    public async Task Show(string cedula, string fkunidad)
    {
        Cedula = cedula;
        paginaObservaciones = 1;
        IsVisible = true;
        observacionSeleccionada = null;
        formObservacion = new FichaobservacioneDTO
        {
            Fkcedula = Cedula,
            Fkunidad = fkunidad,
            Fecha = DateOnly.FromDateTime(DateTime.Now)
        };
        await CargarObservaciones();
        await InvokeAsync(StateHasChanged);
    }

    private async Task CargarObservaciones()
    {
        var resultado = await fichaobservacioneRepo.GetFichaObservacionePaginadosByCedula(
            paginaObservaciones, pageSizeObservaciones, Cedula);
        observaciones = resultado.Items;
        totalObservaciones = resultado.TotalItems;
    }

    private async Task CambiarPagina(int nuevaPagina)
    {
        paginaObservaciones = nuevaPagina;
        await CargarObservaciones();
        await InvokeAsync(StateHasChanged);
    }

    private async Task CerrarModal()
    {
        IsVisible = false;
        observaciones.Clear();
        observacionSeleccionada = null;
        await OnClose.InvokeAsync(null);
        await InvokeAsync(StateHasChanged);
    }

    private async Task GuardarOActualizarObservacion()
    {
        try
        {
            guardando = true;
            if (observacionSeleccionada == null)
            {
                // Nuevo registro
                await fichaobservacioneRepo.InsertFichaObservacione(formObservacion);
            }
            else
            {
                // Actualizar existente
                await fichaobservacioneRepo.UpdateFichaObservacione(formObservacion);
            }

            await CargarObservaciones();
            CancelarEdicion();
            guardando = false;
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            guardando = false;
            Console.Error.WriteLine($"Error al guardar/actualizar observación: {ex.Message}");
        }
    }

    private async Task ConfirmarEliminar()
    {
        bool confirmado = await JSRuntime.InvokeAsync<bool>("confirm", "¿Desea eliminar esta observación?");
        if (confirmado && observacionSeleccionada != null)
        {
            try
            {
                guardando = true;
                await fichaobservacioneRepo.DeleteFichaObservacioneByCedula(observacionSeleccionada.Idfichaobs);
                await CargarObservaciones();
                CancelarEdicion();
                guardando = false;
                await InvokeAsync(StateHasChanged);
            }
            catch (Exception ex)
            {
                guardando = false;
                Console.Error.WriteLine($"Error al eliminar observación: {ex.Message}");
            }
        }
    }

    private bool PuedeGuardar =>
        !string.IsNullOrWhiteSpace(formObservacion.Motivo) &&
        formObservacion.Fecha != null &&
        !guardando;

    private void SeleccionarObservacion(FichaobservacioneDTO obs)
    {
        observacionSeleccionada = obs;
        formObservacion = new FichaobservacioneDTO
        {
            Idfichaobs = obs.Idfichaobs,
            Fkcedula = obs.Fkcedula,
            Fkunidad = obs.Fkunidad,
            Fecha = obs.Fecha,
            Motivo = obs.Motivo
        };
    }

    private void CancelarEdicion()
    {
        observacionSeleccionada = null;
        formObservacion = new FichaobservacioneDTO
        {
            Fkcedula = Cedula,
            Fecha = DateOnly.FromDateTime(DateTime.Now)
        };
    }
}

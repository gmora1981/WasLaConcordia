@if (TotalPages > 1)
{
    <nav>
        <ul class="pagination justify-content-center">
            <li class="page-item @(CurrentPage == 1 ? "disabled" : "")">
                <button class="page-link" @onclick="() => GoToPage(CurrentPage - 1)">«</button>
            </li>

            @if (CurrentPage > 3)
            {
                <li class="page-item"><button class="page-link" @onclick="() => GoToPage(1)">1</button></li>
                <li class="page-item disabled"><span class="page-link">…</span></li>
            }

            @for (int i = Math.Max(1, CurrentPage - 1); i <= Math.Min(TotalPages, CurrentPage + 1); i++)
            {
                <li class="page-item @(i == CurrentPage ? "active" : "")">
                    <button class="page-link" @onclick="() => GoToPage(i)">@i</button>
                </li>
            }

            @if (CurrentPage < TotalPages - 2)
            {
                <li class="page-item disabled"><span class="page-link">…</span></li>
                <li class="page-item"><button class="page-link" @onclick="() => GoToPage(TotalPages)">@TotalPages</button></li>
            }

            <li class="page-item @(CurrentPage == TotalPages ? "disabled" : "")">
                <button class="page-link" @onclick="() => GoToPage(CurrentPage + 1)">»</button>
            </li>
        </ul>
    </nav>

}



@code {
    [Parameter] public int TotalItems { get; set; }
    [Parameter] public int PageSize { get; set; } = 8;
    [Parameter] public int CurrentPage { get; set; } = 1;
    [Parameter] public EventCallback<int> OnPageChanged { get; set; }

    private int TotalPages => (int)Math.Ceiling((double)TotalItems / PageSize);

    private async Task GoToPage(int page)
    {
        if (page == CurrentPage || page < 1 || page > TotalPages)
            return;

        await OnPageChanged.InvokeAsync(page);
    }


}

